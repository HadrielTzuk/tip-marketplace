properties([

])

pipeline {
    agent { label  'linux' }

    options {
        ansiColor('xterm')
    }

    environment {
        JIRA_HOST = 'siemplify.atlassian.net'
        GITHUB_HOST = 'api.github.com'
        GITHUB_ORG = 'Siemplify'
        GITHUB_REPO = 'SiemplifyMarketPlace'
        DOCKER_IMAGE = 'marketplace'
    }

    stages {
        stage('Fulfilling env') {
            steps {
                script {
                  def tools = load 'ops/Jenkinsfile.d/tools.groovy'
                  env.VERSION = tools.getVersion timestamp: true
                } // script
            } // steps
        }

        stage('Initialization') {
            when { expression { return branch_name =~ /^(TIPG-[0-9]*)/ || branch_name =~ /^(PR-[0-9]*)/ || branch_name =~ /^(S[0-9]*\.[0-9]*)/ } }
            // when { expression { return false } }
            parallel {

                stage('Build Docker Image') {
                    // when { expression { return false } }
                    steps {
                        script {
                            def docker = load 'ops/Jenkinsfile.d/docker.groovy'
                            docker.buildAndUpload('ops/Dockerfile')
                        } // script
                    } // steps
                } // stage
            } // parallel
        } // stage

        stage('Basic Tests & Analyses') {
            // when { expression { return branch_name =~ /^(TIPG-[0-9]*)/ || branch_name =~ /^(PR-[0-9]*)/ } }
            when { expression { return false } }

            parallel {
                stage('Unit Tests') {
                    when { expression { return false } }
                    steps {
                        script {
                            try {
                                sh( returnStdout: true,
                                    script: "docker run --rm marketplace:${env.VERSION} pytest")
                            } catch (err) { currentBuild.result = 'UNSTABLE' }
                        } // script
                    } // steps
                } // stage

                stage('Static Code Analysis') {
                    when { expression { return false } }
                    steps {
                        script {
                            try {
                                sh( returnStdout: true,
                                    script: "docker run --rm marketplace:${env.VERSION} flake8 Integrations/")
                            } catch (err) { currentBuild.result = 'UNSTABLE' }
                        } // script
                    } // steps
                } // stage

                stage('Regression Validator') {
                    when { expression { return false } }
                    steps {
                        script {
                            try {
                                sh( returnStdout: true,
                                    script: "docker run --rm marketplace:${env.VERSION} python CI/RegressionValidator.py SiemplifyMarketPlace Siemplify S5.1-RC 123 4200b940815fcce8ddf076941724277bab37daa5")
                            } catch (err) { currentBuild.result = 'UNSTABLE' }
                        } // script
                    } // steps
                } // stage

                stage('JSON Validator') {
                    when { expression { return false } }
                    steps {
                        script {
                            try {
                              sh( returnStdout: true,
                                  script: "docker run --rm marketplace:${env.VERSION} python CI/mpvalidate.py SiemplifyMarketPlace Siemplify S5.1-RC 123 4200b940815fcce8ddf076941724277bab37daa5")
                            } catch (err) { currentBuild.result = 'UNSTABLE' }
                        } // script
                    } // steps
                } // stage

                stage('Version Validator') {
                    when { expression { return false } }
                    steps {
                        script {
                            try {
                                sh( returnStdout: true,
                                    script: "docker run --rm marketplace:${env.VERSION} python CI/VersionCI.py SiemplifyMarketPlace Siemplify S5.1-RC 123 4200b940815fcce8ddf076941724277bab37daa5")
                            } catch (err) { currentBuild.result = 'UNSTABLE' }
                        } // script
                    } // steps
                } // stage
            } // steps
        } // stage

        stage('Mocked Data Functional Tests (Ferrera)') {
            when { expression { return branch_name =~ /^(TIPG-[0-9]*)/ || branch_name =~ /^(PR-[0-9]*)/ } }
            // when { expression { return false } }
            steps {
                script {
                    def test = load 'ops/Jenkinsfile.d/test.groovy'
                    test.run()
                } // script
            } // steps
        } // stage

        stage('Pull Request Status Update') {
            when { expression { return branch_name =~ /^(PR-[0-9]*)/ } }
            // when { expression { return false } }
            steps {
                script {
                    def github = load 'ops/Jenkinsfile.d/github.groovy'
                    def jira = load 'ops/Jenkinsfile.d/jira.groovy'

                    // GitHub considers "Unstable builds" as Failed.
                    // Until all tests are fixed currentBuild.result should be overwritten
                    github.notifyPullRequest  status: 'SUCCESS',
                                              context: 'continuous-integration/jenkins/pr-merge',
                                              desc: 'Tests succeeded'

                    Boolean mergeable = github.isMergeable(branch_name)
                    if ( mergeable ) {
                        String issueId = jira.findIssueByBranch(branch_name)

                        String targetBranch = github.convertPRToBranch prBranch: branch_name, type: 'target', sha: false
                        String nextVersion  = github.getNextVersion(targetBranch)

                        Boolean isReadyForRelease = jira.isPlannedForNextVersion issueId: issueId, nextVersion: nextVersion

                        if ( isReadyForRelease ) {
                            github.mergePullRequest(branch_name)
                            jira.updateStatus issueId: issueId, toStatus: 'QA Backlog'
                        } else { echo "Code is mergeable but not planned for upcoming release" }
                    } else { echo "Skipping merge" }
                } // script
            } // steps
        } // stage

        stage('QA preparations') {
            when { expression { return branch_name =~ /^(S[0-9]*\.[0-9]*-RC)/ } }
            // when { expression { return false } }
            parallel {
                stage('Env deployment') {
                    steps {
                        script {
                            echo "Deployed to QA env"
                        } // script
                    } // steps
                } // stage

                stage('Team notification') {
                    steps {
                        script {
                            echo "Team notification"
                        } // script
                    } // steps
                } // stage

                stage('Jira assignee update') {
                    steps {
                        script {
                            echo "Jira assignee update"
                        } // script
                    } // steps
                } // stage

                stage('Jira issue status update') {
                    steps {
                        script {
                            echo "Jira status update"
                        } // script
                    } // steps
                } // stage
            } // parallel
        } // stage

        stage('QA Approval') {
            when { expression { return branch_name =~ /^(S[0-9]*\.[0-9]*-RC)/ } }
            // when { expression { return false } }
            steps {
                timeout(time: 2, unit: 'DAYS') { input message: 'QA Succeeded?', ok: 'Yes' }
                echo "Tests Passed!"
            } // steps
        } // stage

        stage('Release product') {
            // when { expression { return branch_name =~ /^(S[0-9]*\.[0-9]*-PROD)/ } }
            when { expression { return false } }
            parallel {

                stage('Create Release Notes') {
                    // when { expression { return false } }
                    steps {
                        script {
                            def docs = load 'ops/Jenkinsfile.d/docs.groovy'
                            docs.genReleaseNotes  releaseVersion: env.VERSION.split('-')[0],
                                                  minimumVersion: "5.1" // branch_name.split('-')[0].replace('S', '')

                            docs.commitReleaseNotes()
                        } // script
                    } // steps
                } // stage

                stage('Upload Binaries to BinRepo') {
                    // when { expression { return false } }
                    steps {
                        script {
                            echo "Uploading Binary"
                        } // script
                    } // steps
                } // stage
            } // parallel
        } // stage

    } // stages

    post {
        // https://jenkins.io/doc/book/pipeline/syntax/
        always {
          script {
              def docker = load 'ops/Jenkinsfile.d/docker.groovy'
              docker.deleteImage()
          } // script
        } // always
    } // post
}
