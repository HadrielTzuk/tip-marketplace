{
  "IsEnabled": true,
  "IsCustom": false,
  "Integration": "SiemplifyTest",
  "Name": "Test Connector",
  "Description": "Test the flow of a connector. Verify that the connector is running properly and that its dependencies are installed.",
  "Creator": "Admin",
  "Script": "from SiemplifyConnectors import SiemplifyConnectorExecution\nfrom OverflowManager import OverflowAlertDetails\nfrom SiemplifyConnectorsDataModel import CaseInfo\nimport SiemplifyUtils\nfrom SiemplifyOutputHandler import output_handler\nimport subprocess\n\nfrom TestManager1 import TestManager1\nfrom TestManager2 import TestManager2\nimport pyjokes\nimport cowsay\n\nimport uuid\nimport sys\nimport random\n\n#==============================================================================\n# This is a Connector Template + mock generator. This file objective is to demonstrate how to build a connector, and exmplain the objective of each field.\n# All the data generated here, is MOCK data. Enjoy.\n#==============================================================================\n\nGENERATE_ENVIRONMENTS = True\n\n\n\nclass RandomDataGenerator(object):\n\n    RULE_GENERATOR_FAILED_LOGIN = \"Failed login\"\n    RULE_GENERATOR_OUT_OF_HOURS = \"Out of hours activities\"\n    RULE_GENERATOR_UNAUTHORIZED = \"Unauthorized access attempt\"\n    RULE_GENERATOR_PORT_SCAN = \"Port scan\"\n    RULE_GENERATOR_PHISHING = \"Phishing Attempt\"\n\n    PRODUCT_AD=\"Active Directory\"\n    PRODUCT_IPS = \"IPS\"\n    PRODUCT_PHISHING = \"Phishing Email Detector\"\n    PRODUCT_AV = \"AntiVirus\"\n\n    SOURCE_GROUPING_IDENTIFIER_A = \"A\"\n    SOURCE_GROUPING_IDENTIFIER_B = \"B\"\n    SOURCE_GROUPING_IDENTIFIER_C = \"C\"\n    SOURCE_GROUPING_IDENTIFIER_D = \"D\"\n    SOURCE_GROUPING_IDENTIFIER_E = \"E\"\n\n\n\n    def __init__(self, is_static):\n        self.is_static = is_static\n\n    _vendor = None\n    @property\n    def VENDOR(self):\n        if (not self._vendor or self.is_static == False):\n            vendors = [\"Macrohard\", \"Anira\", \"Mcnally\"]\n            random_vendor = vendors[random.randint(0, len(vendors) - 1)]\n            self._vendor = random_vendor\n\n        return self._vendor\n\n\n    _source_group_identifier = None\n    @property\n    def SOURCE_GROUPING_IDENTIFIER(self):\n        if (not self._source_group_identifier or self.is_static == False):\n            rules = [self.SOURCE_GROUPING_IDENTIFIER_A,\n                     self.SOURCE_GROUPING_IDENTIFIER_B,\n                     self.SOURCE_GROUPING_IDENTIFIER_C,\n                     self.SOURCE_GROUPING_IDENTIFIER_D,\n                     self.SOURCE_GROUPING_IDENTIFIER_E]\n            random_rule = rules[random.randint(0, len(rules) - 1)]\n            self._source_group_identifier = random_rule\n\n        return self._source_group_identifier\n\n    _rule_generator = None\n    @property\n    def RULE_GENERATOR(self):\n        if (not self._rule_generator or self.is_static == False):\n            rules = [self.RULE_GENERATOR_FAILED_LOGIN,\n                     self.RULE_GENERATOR_OUT_OF_HOURS,\n                     self.RULE_GENERATOR_UNAUTHORIZED,\n                     self.RULE_GENERATOR_PORT_SCAN,\n                     self.RULE_GENERATOR_PHISHING]\n            random_rule = rules[random.randint(0, len(rules) - 1)]\n            self._rule_generator = random_rule\n\n        return self._rule_generator\n\n    def create_product(self, rule_generator):\n        rule_tree = {self.RULE_GENERATOR_FAILED_LOGIN: [self.PRODUCT_AD,self.PRODUCT_IPS],\n                     self.RULE_GENERATOR_OUT_OF_HOURS: [self.PRODUCT_AD,self.PRODUCT_IPS],\n                     self.RULE_GENERATOR_UNAUTHORIZED: [self.PRODUCT_AD, self.PRODUCT_IPS],\n                     self.RULE_GENERATOR_PORT_SCAN: [self.PRODUCT_AV,self.PRODUCT_IPS],\n                     self.RULE_GENERATOR_PHISHING : [self.PRODUCT_PHISHING]}\n        possible_products = rule_tree[rule_generator]\n        random_product = possible_products[random.randint(0, len(possible_products) - 1)]\n        return random_product\n\n\n    def create_alert_name(self,rule_generator, product):\n\n        tree = {self.RULE_GENERATOR_OUT_OF_HOURS: {self.PRODUCT_AD:[\"Active Directory Audit Policy Warning\"],\n                                         self.PRODUCT_IPS:[\"Activity timeline sensor triggered\"]},\n                self.RULE_GENERATOR_FAILED_LOGIN: {self.PRODUCT_AD:[\"Active Directory Audit Policy Warning\"],\n                                         self.PRODUCT_IPS:[\"User Authentication sensor triggered\",\"unauthorized access detected\"]},\n                self.RULE_GENERATOR_PORT_SCAN: {self.PRODUCT_AV:[\"New Port Used\",\"System Service port blocked by unknown process\"],\n                                                self.PRODUCT_IPS:[\"Out out policy port used\",\"Unusual Port activity\"]},\n                self.RULE_GENERATOR_PHISHING: {self.PRODUCT_PHISHING:[\"Suspisous attachment hash detected in mail\",\"Mail contains a known phishing address\"]},\n                self.RULE_GENERATOR_UNAUTHORIZED: {self.PRODUCT_AD:[\"User attempted to access computer out of Group\", \"'Morgan' vulnrability detected\"],\n                                                   self.PRODUCT_IPS:[\"WAF Flag Triggered A54\",\"WAF Flag Triggered B34\"]}\n                }\n\n        possible_event_names = tree[rule_generator][product]\n\n\n        #                      \"Port scan\": [\"ClearNet's detected a port scan\", \"Antivirus detected unusual port traffic\"]}\n\n        random_event_name = possible_event_names[random.randint(0, len(possible_event_names) - 1)]\n\n        return random_event_name\n\n\n    _source_host = None\n\n    ATTACHMENT_A_BLOB64 = \"iVBORw0KGgoAAAANSUhEUgAAAGMAAABoCAYAAADl/E5WAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAVQSURBVHhe7Zs/aBtXHMd/5ymaKhlSsCDY2BlsJ5QEZcgQDCl1F5PFtENpCTaYbqZQAhm6GEyGgmkJXQ0xJiVLMAXjpYaICA8dIhJKY2exqEhRhoClTurk63v276TT6U4nnfSefi/v9wHj35NDBn3u931/7s6p/vObCwwJRvA3QwCWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQiWQQjCDz6XYa24D7s4CmcUvptdhLspHBoOLRm1POSOj3HQK+aLoSGjLwnt3JlagbU0DgxiyDK6iaKEZOahODmOAzMY3gQuu0GVCEl1H3KHr4RucxhOZ3QbS7FXd3xnmRRZ+mXEikg4EddfwTeHL+AIhx4z2S/g8ZgZNjTHlLiSO4iQX1wxl3BFlLoGj3MrUJy9ATP4kWlolVEoRUeKjJOBXMEoZSc7eja8nDJnWaUvpjrEk6lL0UGjqTNqsF0JFyGjiUWco0dG7SU8rGPtJ3UDHhgyuepAi4zCSUQ8Za+BWdsytWiQUYZnVSz9iK5Y5qZoQb2MWil0BTWTmeCuCKBcRrke1haj8Hma2yKIYhk1eF49wdpPBiY+kHsQg0SxjH+hFLqKynBEhaBhAg/hAssIQ+0OfCCHd33c8xArtp1Zc5bPw+mMXohYjXVF/QU8qmFtAPRlWAR9GelJuIPlh85Q5gw196drsH34tO0MzKQTYbWdIZawl7Fk4lEcUx/BZNjm7r+qUQ8K6EKxjDRMXMDST70Ez8M2g5ajfAIfT53f/mzlBH6vGbTm1IQGGRmsWjmq/s1RFUC5jMilqWEbMh2olwHjsIxPagTZrZj1xJ9qNMgQOkR3hD7LJLrjh3fcHh5aZMhnmb4NnzrgqPIMtnlldYYeGYK5sagn/U7g4eEOCxFokyG740HE3HEuZBPWLE8sfTIE42OL8HNEXEl2jzchV8xDAce9UCi1n0uZxhBeCQg/0Asl7kCxi1cL+JWAWHoQ0id8ahtLGu7ONp8UV8cUfGrQE0FD6gw/at7rM+klGQ8CMjwGEV2KXz9+m4fTL/dw4GP1Pox8fREHySEko5Xyux1YrIQ9ANeKlg44eAKn94o4iCIHzh9fgYOjJJCVQYf34C79CO4bWQe/8Nfg3nwEjS9wegFGtm7joHeGNIGbh7OxASNtV/4VIWe5+dmbPXAPsE4Ay4jlIjhbG+DcwmEbVwAWsBS45fdY9Y4dMn79CU5v3jv7ibty3fXzf3e6lMdP4nEms1j1hx0y5q5jIb7s/GuswhB/8xZLUx9joQ87ZFy6Cs401nt/NifcIAfNvzm3Rfx0hZjg9ytYZ8GZS77EtWTOELk/70WJWKJGRJWb95avOYDIOSLA279wpSWYvg7OJawTYM8EHhtVvoha/azr/YK75dsEzl/FIhn2yIiLqkZE9RA1YjPoei7kHqPPXbg9MmRUrYj4OSMYVSL3NzGiuo4aseFr7MqFwPXkmz0Pi2QIbn3SiJ+WqPLnfldR07rzdja+72uu8LBLhn+D5o+qwkssuokoeTziOwJZvd9hQ9gblsmQS9ZgVPmWprER5T+nEgzotNbDOhltUeWLKGelU+6rFSGxT0YwqhoR1Xlv4a6rFSGxUIbogCXPRhHcXzCiFpodE0SeVzWWsAvLSkRILL2fEYgcgTwiD52Io+7udSDy/4rBys5oPR6R9HD8oRC+00cISzuDJiyDECyDECyDECyDECyDECyDECyDECyDECyDECyDECyDECyDECyDDAD/A+CNxriJKoq1AAAAAElFTkSuQmCC\"\n    ATTACHMENT_B_BLOB64 = \"\"\n    ATTACHMENT_C_BLOB64 = \"VGV4dCBFeGFtcGxlLCB3aHk/IHdoYXQgZGlkIHlvdSBleHBlY3Q/\"\n    def create_random_alert_attachment(self):\n        attachments = [{\"base64_blob\" : self.ATTACHMENT_A_BLOB64,\n                        \"type\" : \"png\",\n                        \"name\" : \"G2\",\n                        \"description\" : \"G2 Icon for for testing attachments via case info\",\n                        \"is_favorite\" : False},\n                       {\"base64_blob\": self.ATTACHMENT_B_BLOB64,\n                        \"type\": \"pdf\",\n                        \"name\": \"AttachmentExample\",\n                        \"description\": \"Slide converted into pdf for testing attachments via case info\",\n                        \"is_favorite\": False},\n                       {\"base64_blob\": self.ATTACHMENT_C_BLOB64,\n                        \"type\": \"txt\",\n                        \"name\": \"ExampleTest\",\n                        \"description\": \"text file converted writen manualy and with love for testing attachments via case info\",\n                        \"is_favorite\": True}\n                       ]\n\n        random_attachment = attachments[random.randint(0, len(attachments) - 1)]\n        return random_attachment\n\n    @property\n    def SOURCE_HOST(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._source_host or self.is_static == False):\n            self._source_host = \"Src_Host_\" + str(random.randint(0, 10))\n        return self._source_host\n\n    _dest_host = None\n\n    @property\n    def DEST_HOST(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._dest_host or self.is_static == False):\n            self._dest_host = \"Dst_Host_\" + str(random.randint(0, 10))\n        return self._dest_host\n\n    _source_ip = None\n    @property\n    def SOURCE_IP(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._source_ip or self.is_static == False):\n            self._source_ip = \"10.0.0.\" + str(random.randint(0, 50))\n        return self._source_ip\n\n    _dest_ip = None\n    @property\n    def DESTINATION_IP(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._dest_ip or self.is_static == False):\n            self._dest_ip = \"200.0.0.\" + str(random.randint(0, 50))\n        return self._dest_ip\n\n    _source_username = None\n    @property\n    def SOURCE_USERNAME(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._source_username or self.is_static == False):\n            self._source_username = \"src_user_\" + str(random.randint(0, 50))\n        return self._source_username\n\n    _destination_username = None\n    @property\n    def DESTINATION_USERNAME(self):\n        if (random.randint(0, 5) == 0): return None\n        if (not self._destination_username or self.is_static == False):\n            self._destination_username = \"dst_user_\" + str(random.randint(0, 50))\n        return self._destination_username\n\n    _usb = None\n    @property\n    def USB(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._usb or self.is_static == False):\n            self._usb = \"usb_\" + str(random.randint(0, 300))\n        return self._usb\n\n    _filename = None\n    @property\n    def FILENAME(self):\n        if (random.randint(0, 3) == 0): return None\n        if (not self._destination_username or self.is_static == False):\n            self._filename = \"filename\" + str(random.randint(0, 50))+\".txt\"\n        return self._filename\n\n    _filehash = None\n    @property\n    def FILEHASH(self):\n        if (random.randint(0, 4) == 0): return None\n        if (not self._destination_username or self.is_static == False):\n            hashes = [\"bb9d72654ab021561cef4c38ae0f8999\",\n                     \"ba22d18e50b1dd3816234194f1ec80d0\",\n                     \"3283e1a9cc738526842c195a862a8b14\",\n                     \"4da2687190b4fb0986c30e7b048c34c1\",\n                     \"08c75a8fb8010d5b68dde217f92fe84e\",\n                     \"c2e39d563dd537288f441643e334f6b9\",\n                     \"d4b4e9b2cdff02ac0f5c6bf7cb878c49\",\n                     \"f881b4cfbf549405f830a2f1cd2ba2d7\",\n                     \"29dad148591bf98df950f6071ff014b9\"]\n            self._filehash = hashes[random.randint(0, len(hashes) - 1)]\n        return self._filehash\n\n    _destinationPort = None\n    @property\n    def PORT(self):\n        if (random.randint(0, 2) == 0): return None\n        if (not self._destination_username or self.is_static == False):\n            self._destinationPort = str(random.randint(1, 9000))\n        return self._destinationPort\n\n    _categoryOutcome = None\n    @property\n    def CATEGORY_OUTCOME(self):\n        if (not self._destination_username or self.is_static == False):\n            outcomes = [\"Blocked\",\n                      \"Approved\",\n                      \"Rejected\",\n                      \"Passed\",\n                      \"Proxied\",\n                      \"Unified\",\n                      \"Eliminited\",\n                      \"Exterminiated\",\n                      \"Quarantined\"]\n            self._categoryOutcome = outcomes[random.randint(0, len(outcomes) - 1)]\n        return self._categoryOutcome\n\nclass DummyGenerator(object):\n    SOURCE = \"DummyGenerator\"\n\n    def __init__(self,logger):\n        self.LOGGER = logger\n        self.GENERATOR = RandomDataGenerator(is_static=True)\n\n    def BuildDummySecurityEvent(self,environment, rule_generator, product):\n        event = {}\n\n        # Fill event fields by BL logic here:\n        # Here is an exmaple of fields usually found in siems:\n\n        # Time Fields (Arcsight Example):\n        event[\"managerReceiptTime\"] = SiemplifyUtils.unix_now() # Times should be saved in UnixTime. You may use SiemplifyUtils DateTime conversions, or the example convert_datetime_to_unix_time method below\n        event[\"StartTime\"] = SiemplifyUtils.unix_now()\n        event[\"EndTime\"] = SiemplifyUtils.unix_now()\n        event[\"Environment\"] = environment\n\n        # Some fields, siemplify expects as mandatory. Their names may vary in source, but later on they will be mapped:\n        alert_type = self.GENERATOR.create_alert_name(rule_generator,product)\n        event[\"event_type\"] = alert_type\n        event[\"name\"] = alert_type + \" \" + str(SiemplifyUtils.unix_now())\n        event[\"device_product\"] =  product# ie: \"device_product\" is the field name in arcsight that describes the product the event originated from.\n\n         # usually, the most intresting fields are (again, their precise name, may vary between siems.\n        # You are not expected to fill them yourself, just pass them along from the siem. Since this is a dummy generator, We create them manaualy with made up name (PascalCase\\CcmelCase doesn't matter)\n        event[\"SourceHostName\"] = self.GENERATOR.SOURCE_HOST\n        event[\"DestinationHostName\"] = self.GENERATOR.DEST_HOST\n        event[\"SourceAddress\"] = self.GENERATOR.SOURCE_IP\n        event[\"DestinationAddress\"] = self.GENERATOR.DESTINATION_IP\n        event[\"SourceUserName\"] = self.GENERATOR.SOURCE_USERNAME\n        event[\"DestinationUserName\"] = self.GENERATOR.DESTINATION_USERNAME\n        event[\"FileName\"] = self.GENERATOR.FILENAME\n        event[\"Usb\"] = self.GENERATOR.USB\n        event[\"FileHash\"] = self.GENERATOR.FILEHASH\n        event[\"Port\"] = self.GENERATOR.PORT\n        event[\"CategoryOutcome\"] = self.GENERATOR.CATEGORY_OUTCOME\n\n        non_empty_event = {}\n        for key in event:\n            if (event[key]):\n                non_empty_event[key]=event[key]\n\n        # It is also usual, for extra data, to be available, or fetched from the siem. What it is you want. ie:\n        # event[\"IsMalicousByVirusTotal\"] =\n        # event[\"PaloAlto_AutoFocus_Tags\"] =\n\n        return non_empty_event\n\n    def GenerateDummyCase(self, siemplify, environment):\n\n        # We start by creating a caseInfo object. This represent a siemplify \"Alert\".\n        # An alert, is the siems build in aggregation of basic event ie (Arcsight correlation or QRadar Offense)\n        case_info = CaseInfo()\n        case_info.events = []\n        case_info.source_grouping_identifier = self.GENERATOR.SOURCE_GROUPING_IDENTIFIER\n        # each case_info object, must have a uniqe key. The objective of this, is to later validate the same data isn't digested multiple times, creating duplicates in the system.\n        # The key is later on built by \"Name' + 'TicketId' fields Combination. Make sure its a unique combination! (ie: Arcsight will use: CorrelationName+EventId. QRadar will use: OffenseName+OffenseId)\n        # The uniqueness must be persistant, even after Server Restart\\ Refetching of the same that from siem, multiple runs of the same API queries, etc.\n        case_info.ticket_id = str(uuid.uuid4())  # The ID of the siem alert. Should be the extact ID as saved and identified in the siem. (ie: Arcsight Correlation's EventId, or QRadar OffenseId).\n\n        case_info.rule_generator = self.GENERATOR.RULE_GENERATOR  # Describes the name of the siem's rule, that caused the aggregation of the alert.\n        case_info.name =  case_info.rule_generator + \" \" + str(SiemplifyUtils.unix_now())\n        case_info.device_product = self.GENERATOR.create_product(case_info.rule_generator) # This field, may be fetched from the Original Alert. If you build this alert manualy, Describe the source product of the data. (ie: ActiveDirectory, AntiVirus)\n        # ----------------------------- Base Events Populating START -----------------------------\n        # Build case events here, heres a mock example:\n        # First, we wil populate the alert with events:\n\n\n\n        for i in range(0,2):\n            random_event = self.BuildDummySecurityEvent(environment, case_info.rule_generator, case_info.device_product)\n            case_info.events.append(random_event)\n        # ----------------------------- Base Events Populating END -----------------------------\n\n\n        # ----------------------------- Alert Field initilization START -----------------------------\n\n\n        case_info.environment = environment\n\n        # The alert times may be fetched as the original data of the alert, or recalculated as the minimum+maxsimum times of BaseEvents.\n        case_info.start_time =  SiemplifyUtils.unix_now() # Times should be saved in UnixTime. You may use SiemplifyUtils DateTime conversions\n        case_info.end_time =  SiemplifyUtils.unix_now()\n\n        # Cases Priority are Calculated by the siemplify Server Algorithem. But, sometimes, the feature may be turned off (To preserve original siem priority).\n        # In case this may happen, it is advised to set a default priority value before hand.\n        case_info.priority =  60 # Informative = -1,Low = 40,Medium = 60,High = 80,Critical = 100.\n\n        case_info.device_vendor = self.GENERATOR.VENDOR # This field, may be fetched from the Original Alert. If you build this alert manualy, Describe the source vendor of the data. (ie: Microsoft, Mcafee)\n        case_info.attachments = [self.GENERATOR.create_random_alert_attachment()]\n        # ----------------------------- Alert Field initilization END -----------------------------\n\n        return case_info\n\n\n@output_handler\ndef main():\n    # Connectors are run in iterations. The interval is configurable from the ConnectorsScreen UI.\n    start_timestamp = SiemplifyUtils.unix_now()\n    output_variables = {}\n\n    cases = [] # The main output of each connector run\n    siemplify = SiemplifyConnectorExecution() # Siemplify main SDK wrapper\n    \n\n    # ------------ Logging ----------------------\n    # It is best to use this logger. It's output will be visible at:\n    # \"C:\\Siemplify_Server\\Scripting\\SiemplifyConnectorExecution\\<Connector's instance name>\\logdata.log\"\n    # \"http://localhost:5601 -- default kibana service\n    # It is possible to pass the logger class other classes.\n    siemplify.LOGGER.info(\"----Mock Template - Main - STARTED-------\")\n    # Last logging call must be performed before calling \"return_package\"\n\n    # log_items is a depricated logging system. each item is a string record. It is passed along via the sdtout, after calling the \"return_package\" method, So size should be considered.\n    # This logs will be passed along the the siemplify server DB, if feature is turned on, via the connector framework.\n    log_items = []  #\n    # ------------ Logging ----------------------\n\n    # the params passed along from the Framework (as set in the IDE \\ Connector screen UI. Can be used to create a more configurable logic, are simply, pass dynamic arguments (ie: Server IP + Credentials)\n    params = siemplify.parameters\n    siemplify.LOGGER.info(\"PARAMS:\" + str(params))\n\n    # For MSSP, each alert and its baseEvents, will be part of a diffrenet customer environment. In Arcsight, it is distinguished by the \"customer_uri\" field. Here we create a random:\n    environments = [\"AAA\", \"BBB\", \"CCC\"]\n    random_environment = environments[random.randint(0, len(environments) - 1)]\n\n    if (GENERATE_ENVIRONMENTS==False):\n        random_environment = None\n\n    dummyCon = DummyGenerator(siemplify.LOGGER)\n    dummyCase = dummyCon.GenerateDummyCase(siemplify,random_environment)\n\n    # overflow, is a configurable mechanism to limit alert digested by the system, based on a 3 way key (environment, product, ruleGenreator (alertName)\n    is_overflow = siemplify.is_overflowed_alert(environment=random_environment,\n                                                alert_identifier=str(dummyCase.ticket_id),\n                                                #ingestion_time=str(SiemplifyUtils.unix_now()),\n                                                #original_file_path=None,\n                                                #original_file_content=None,\n                                                alert_name=str(dummyCase.rule_generator),\n                                                product=str(dummyCase.device_product)\n                                                #source_ip=None,\n                                                #source_host=None,\n                                                #destination_ip=None,\n                                                #destination_host=None\n                                                )\n\n    if (is_overflow):\n        siemplify.LOGGER.warn(\"Alert {} has overflowed\".format(dummyCase.ticket_id), module=\"DummyConnector\", alert_id=dummyCase.ticket_id)\n    else:\n        cases.append(dummyCase)\n        siemplify.LOGGER.info(\"Alert {} processed by DummyConnector\".format(dummyCase.ticket_id), module=\"DummyConnector\", alert_id=dummyCase.ticket_id)\n\n    end_timestamp = SiemplifyUtils.unix_now()\n    runtime_ms = end_timestamp-start_timestamp\n    siemplify.LOGGER.info(\"----Mock Template - Main - FINISHED-------\",module=\"OverflowMockConnector\",alert_id=dummyCase.ticket_id,miliseconds=runtime_ms)\n    # At the and, call the Return_package, to return the result of the connector run, from the python scrpit, back to the Framework.\n    siemplify.return_package(cases, output_variables, log_items)\n\n\n@output_handler\ndef Test():\n    # This method, is called when clicking the Test button in the IDE \\ Connector screen UI's\n    # This method objective is to validate the connector is ready to run. Here is the place to perform connectivty, credentials, and params test.\n\n    # ------------------ Test Logic - Start -----------------------\n    siemplify = SiemplifyConnectorExecution()\n    siemplify.LOGGER.info(\"----Mock Template - Test - STARTED-------\")\n    \n    siemplify.LOGGER.info(\"------------------TEST DEPENDENCIES & MANAGERS COUPLING------------------\")\n\n    t1 = TestManager1()\n    assert t1.get_version() == \"A1\"\n\n    t2 = TestManager2()\n    assert t2.get_version() == \"A2\"\n\n    cowsay.cheese(\"YAY\")\n    siemplify.LOGGER.info(pyjokes.get_joke())\n\n    assert pyjokes.__version__ == \"0.5.0\"\n    proc = subprocess.Popen(\"pip freeze\", stdout=subprocess.PIPE, shell=True)\n    out, err = proc.communicate()\n    assert \"cowsay==2.0.3\" in out\n    siemplify.LOGGER.info(\"------------------FINISHED TEST DEPENDENCIES & MANAGERS COUPLING------------------\")\n\n\n    siemplify.LOGGER.info(\"------------------TEST CONNECTOR PARAMS------------------\")\n    \n    boolean = str(siemplify.parameters.get(\"Boolean\", \"False\")).lower() == 'true'\n    integer = int(siemplify.parameters.get(\"Integer\", 0)) if siemplify.parameters.get(\"Integer\") else 0\n    password = siemplify.parameters.get(\"Password\")\n    string = siemplify.parameters.get(\"String\")\n    ip = siemplify.parameters.get(\"IP\")\n    email = siemplify.parameters.get(\"Email\")\n    user = siemplify.parameters.get(\"User\")\n    stage = siemplify.parameters.get(\"Stage\")\n    case_close_reason = siemplify.parameters.get(\"Case Close Reason\")\n    close_case_root_cause = siemplify.parameters.get(\"Close Case Root Cause\")\n    priority = siemplify.parameters.get(\"Priority\")\n    email_content = siemplify.parameters.get(\"Email Content\")\n    content = siemplify.parameters.get(\"Content\")\n    playbook_name = siemplify.parameters.get(\"Playbook Name\")\n    entity_type = siemplify.parameters.get(\"Entity Type\")\n    lst = siemplify.parameters.get(\"List\")\n    \n    siemplify.LOGGER.info(\"Boolean: {}\".format(boolean))\n    siemplify.LOGGER.info(\"Integer: {}\".format(integer))\n    siemplify.LOGGER.info(\"Password: {}\".format(password))\n    siemplify.LOGGER.info(\"String: {}\".format(string))\n    siemplify.LOGGER.info(\"IP: {}\".format(ip))\n    siemplify.LOGGER.info(\"Email: {}\".format(email))\n    siemplify.LOGGER.info(\"User: {}\".format(user))\n    siemplify.LOGGER.info(\"Stage: {}\".format(stage))\n    siemplify.LOGGER.info(\"Case Close Reason: {}\".format(case_close_reason))\n    siemplify.LOGGER.info(\"Close Case Root Cause: {}\".format(close_case_root_cause))\n    siemplify.LOGGER.info(\"Priority: {}\".format(priority))\n    siemplify.LOGGER.info(\"Email Content: {}\".format(email_content))\n    siemplify.LOGGER.info(\"Content: {}\".format(content))\n    siemplify.LOGGER.info(\"Playbook Name: {}\".format(playbook_name))\n    siemplify.LOGGER.info(\"Entity Type: {}\".format(entity_type))\n    siemplify.LOGGER.info(\"List: {}\".format(lst))\n    \n    siemplify.LOGGER.info(\"------------------FINISHED TEST CONNECTOR PARAMS------------------\")\n    \n    # result_params is a free-form dictionary, that will be presented in the UI after clicking the Test button.\n    # You may place here whatever you want. Here is an mock example\n    result_params = {}\n    result_params[\"Params Validation\"] = \"Valid\" # ie: Valid, Missing Mandatory, Invalid Values,\n    result_params[\"Connectivity Validation\"] = \"No Ping\" # ie: Success, No Ping, No endpoint listening, Timeout, HTTP ErrorCodes\n    result_params[\"Credentials Validation\"] = \"Valid\" # ie: Wrong Username\\Password\n    result_params[\"Data Fetching\"] = \"Valid\" # ie: Success, Autherization Problem, No Data, Invalid Query Syntax\n\n    success = True # simple Yes no Anser for Connector Test Success status:\n\n    # overflow, is a configurable mechanism to limit alert digested by the system, based on a 3 way key (environment, product, ruleGenreator (alertName)\n    is_overflow = siemplify.is_overflowed_alert(environment=\"TEST ENV\",\n                                                alert_identifier=\"TICKET_ID\",\n                                                alert_name=\"RULE_GEN\",\n                                                product=\"PRODUCT\")\n\n    siemplify.LOGGER.info(\"----Mock Template - Test - FINISHED-------\")\n    # ------------------ Test Logic - End -----------------------\n\n    siemplify.return_test_result(success, result_params)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2 or sys.argv[1] == 'True':\n        print \"Starting Main Execution\"\n        main()\n    else:\n        print \"Starting Test Execution\"\n        Test()",
  "Version": 6,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "device_product",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561386045074,
      "ModificationTimeUnixTimeInMs": 1561386045074
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": false,
      "DefaultValue": "device_product",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561386045076,
      "ModificationTimeUnixTimeInMs": 1561386045076
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": true,
      "DefaultValue": "30",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561386045077,
      "ModificationTimeUnixTimeInMs": 1561386045077
    },
    {
      "ConnectorDefinitionId": 2,
      "IsMandatory": false,
      "DefaultValue": "true",
      "Name": "Fail",
      "Type": 0,
      "Mode": 2,
      "Description": "",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561386045077,
      "ModificationTimeUnixTimeInMs": 1561386045077
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "true",
      "Description": null,
      "Name": "Boolean",
      "Value": "true",
      "Type": 1,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996154,
      "ModificationTimeUnixTimeInMs": 1561380996154
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "0",
      "Description": null,
      "Name": "Integer",
      "Value": "0",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996156,
      "ModificationTimeUnixTimeInMs": 1561380996156
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": null,
      "Name": "String",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996157,
      "ModificationTimeUnixTimeInMs": 1561380996157
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "123456",
      "Description": null,
      "Name": "Password",
      "Value": "123456",
      "Type": 12,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996158,
      "ModificationTimeUnixTimeInMs": 1561380996158
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "1.1.1.1",
      "Description": null,
      "Name": "IP",
      "Value": "1.1.1.1",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996159,
      "ModificationTimeUnixTimeInMs": 1561380996159
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "someone@example.com",
      "Description": null,
      "Name": "Email",
      "Value": "someone@example.com",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996161,
      "ModificationTimeUnixTimeInMs": 1561380996161
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "Admin",
      "Description": null,
      "Name": "User",
      "Value": "Admin",
      "Type": 3,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996161,
      "ModificationTimeUnixTimeInMs": 1561380996161
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "Triage",
      "Description": null,
      "Name": "Stage",
      "Value": "Triage",
      "Type": 4,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996161,
      "ModificationTimeUnixTimeInMs": 1561380996161
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "1",
      "Description": null,
      "Name": "Case Close Reason",
      "Value": "1",
      "Type": 5,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996161,
      "ModificationTimeUnixTimeInMs": 1561380996161
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "1",
      "Description": null,
      "Name": "Close Case Root Cause",
      "Value": "1",
      "Type": 6,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996161,
      "ModificationTimeUnixTimeInMs": 1561380996161
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "-1",
      "Description": null,
      "Name": "Priority",
      "Value": "-1",
      "Type": 7,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996162,
      "ModificationTimeUnixTimeInMs": 1561380996162
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": null,
      "Name": "Email Content",
      "Value": null,
      "Type": 10,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996162,
      "ModificationTimeUnixTimeInMs": 1561380996162
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "Test",
      "Description": null,
      "Name": "Content",
      "Value": "Test",
      "Type": 11,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996163,
      "ModificationTimeUnixTimeInMs": 1561380996163
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": null,
      "Name": "Playbook Name",
      "Value": null,
      "Type": 2,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996163,
      "ModificationTimeUnixTimeInMs": 1561380996163
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": null,
      "Name": "Entity Type",
      "Value": null,
      "Type": 13,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996164,
      "ModificationTimeUnixTimeInMs": 1561380996164
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": "a",
      "Description": null,
      "Name": "List",
      "Value": "a",
      "Type": 15,
      "OptionalValues": [
        "a",
        "b",
        "c"
      ],
      "OptionalValuesJson": "[\"a\",\"b\",\"c\"]",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1561380996164,
      "ModificationTimeUnixTimeInMs": 1561380996164
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1561386045054,
  "ModificationTimeUnixTimeInMs": 1561386045062
}