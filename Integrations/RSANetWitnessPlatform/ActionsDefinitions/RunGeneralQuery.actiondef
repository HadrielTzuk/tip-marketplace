{
    "CreationTimeUnixTimeInMs": 1534420803928,
    "Creator": "Admin",
    "Description": "Run free query and receive event and a PCAP file.",
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"payload.req\": \"66\", \"ubc.req\": \"18\", \"netname\": \"multicast dst\", \"lifetime\": \"0\", \"rid\": \"48908\", \"payload\": \"66\", \"size\": \"150\", \"service\": \"0\", \"mcb.req\": \"0\", \"eth.src\": \"00:50:56:B5:76:2B\", \"udp.srcport\": \"60807\", \"udp.dstport\": \"5355\", \"direction\": \"lateral\", \"medium\": \"1\", \"ip.dst\": \"1.1.1.1\", \"alert\": \"test App rule\", \"sessionid\": \"48908\", \"eth.type\": \"2048\", \"ip.src\": \"1.1.1.1\", \"mcbc.req\": \"24\", \"eth.dst\": \"11:11:5E:11:11:FC\", \"did\": \"nwappliance5805\", \"packets\": \"2\", \"streams\": \"1\", \"time\": 1547047123, \"entropy.req\": \"3498\", \"ip.proto\": \"17\"}, {\"payload.req\": \"66\", \"ubc.req\": \"18\", \"netname\": \"multicast dst\", \"lifetime\": \"0\", \"rid\": \"48908\", \"payload\": \"66\", \"size\": \"150\", \"service\": \"0\", \"mcb.req\": \"0\", \"eth.src\": \"22:22:22:B2:22:2B\", \"udp.srcport\": \"60807\", \"udp.dstport\": \"5355\", \"direction\": \"lateral\", \"medium\": \"1\", \"ip.dst\": \"1.1.1.1\", \"alert\": \"test App rule\", \"sessionid\": \"48908\", \"eth.type\": \"2048\", \"ip.src\": \"1.1.1.1\", \"mcbc.req\": \"24\", \"eth.dst\": \"33:44:5E:44:44:FC\", \"did\": \"nwappliance5805\", \"packets\": \"2\", \"streams\": \"1\", \"time\": 1547047331, \"entropy.req\": \"3498\", \"ip.proto\": \"17\"}]",
            "ResultName": "JsonResult"
        }
    ],
    "Id": -1,
    "IntegrationIdentifier": "RSANetWitnessPlatform",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1534420803928,
    "Name": "Run General Query",
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1534420803928,
            "CustomActionId": -1,
            "DefaultValue": null,
            "Description": "Custom query string.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1534420803928,
            "Name": "Query",
            "Type": 0,
            "Value": null
        },
        {
            "CreationTimeUnixTimeInMs": 1534420803928,
            "CustomActionId": -1,
            "DefaultValue": 1,
            "Description": "Specify how many hours backwards to fetch events. Default is 1 hour.",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1534420803928,
            "Name": "Max Hours Backwards",
            "Type": 0,
            "Value": 1
        },
        {
            "CreationTimeUnixTimeInMs": 1534420803928,
            "CustomActionId": -1,
            "DefaultValue": 50,
            "Description": "Specify how many events to return. If nothing is specified, action will return 50 events.",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1534420803928,
            "Name": "Max Events To Return",
            "Type": 0,
            "Value": 50
        }
    ],
    "Script": "from SiemplifyAction import SiemplifyAction, ScriptResult\nfrom RSAManager import RSA\nfrom SiemplifyUtils import construct_csv\nimport base64\n\n# Consts.\nRSA_PROVIDER = 'RSA'\nACTION_NAME = \"Update the 'TI' database of NetWitness\"\nTITLE = 'Result PCAP'\nFILE_NAME = 'result_pcap.pcap'\nTABLE_NAME = 'Result Events'\n\n\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = ACTION_NAME\n\n    # Configuration.\n    config = siemplify.get_configuration(RSA_PROVIDER)\n\n    # Configuration Parameters.\n    rsa_manager = RSA(concentrator_uri=config.get('Concentrator Api Root'),\n                      decoder_uri=config.get('Decoder Api Root'),\n                      username=config.get('Username'),\n                      password=config.get('Password'))\n\n    # Variables Definition.\n    result_value = False\n    events = []\n\n    # Parameters.\n    query = siemplify.parameters.get('Query')\n\n    session_ids = rsa_manager.get_session_ids_for_query(query)\n\n    if session_ids:\n        # Get PCAP file.\n        pcap_content = rsa_manager.get_pcap_of_session_id(','.join(session_ids))\n        siemplify.result.add_attachment(TITLE, FILE_NAME, base64.b64encode(pcap_content))\n        # Get Events.\n        for session_id in session_ids:\n            try:\n                events.append(rsa_manager.get_metadata_from_session_id(session_id))\n            except Exception as err:\n                error_massage = \"Error retrieving event for session ID: {0}, ERROR: {1}\".format(\n                    session_id,\n                    err.message\n                )\n                siemplify.LOGGER.error(error_massage)\n                siemplify.LOGGER.exception(err)\n\n        if events:\n            siemplify.result.add_data_table(TABLE_NAME, construct_csv(events))\n\n        result_value = True\n\n    if result_value:\n        output_message = 'Found results for query - \"{0}\"'.format(query)\n    else:\n        output_message = 'No results found for query - \"{0}\"'.format(query)\n\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
    "ScriptResultName": "events_json",
    "Version": 1.0,
    "SimulationDataJson": "{\"Entities\":[]}"
}