{
    "CreationTimeUnixTimeInMs": 1548084593405, 
    "Creator": "System", 
    "Description": "Set the password of a user without validating existing credentials", 
    "DynamicScriptResultNamesJson": "[\"ResultJson\"]", 
    "Id": -1, 
    "IntegrationIdentifier": "Okta", 
    "IsCustom": false, 
    "IsEnabled": true, 
    "ModificationTimeUnixTimeInMs": 1548084593417, 
    "Name": "Set Password", 
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1548084593428, 
            "CustomActionId": 710, 
            "DefaultValue": "", 
            "Description": "Ids or logins of users in Okta", 
            "Id": -1, 
            "IsMandatory": false, 
            "ModificationTimeUnixTimeInMs": 1548084593428, 
            "Name": "User IDs Or Logins", 
            "Type": 0, 
            "Value": ""
        }, 
        {
            "CreationTimeUnixTimeInMs": 1548084593429, 
            "CustomActionId": 710, 
            "DefaultValue": "", 
            "Description": "The new password", 
            "Id": -1, 
            "IsMandatory": true, 
            "ModificationTimeUnixTimeInMs": 1548084593429, 
            "Name": "New Password", 
            "Type": 0, 
            "Value": ""
        }, 
        {
            "CreationTimeUnixTimeInMs": 1548084593429, 
            "CustomActionId": 710, 
            "DefaultValue": "false", 
            "Description": "Whether to add extra characters to every user password or not", 
            "Id": -1, 
            "IsMandatory": false, 
            "ModificationTimeUnixTimeInMs": 1548084593429, 
            "Name": "Add 10 Random Chars", 
            "Type": 1, 
            "Value": "false"
        }, 
        {
            "CreationTimeUnixTimeInMs": 1548084593429, 
            "CustomActionId": 710, 
            "DefaultValue": "false", 
            "Description": "Whether to run on entities as well as the input", 
            "Id": -1, 
            "IsMandatory": false, 
            "ModificationTimeUnixTimeInMs": 1548084593429, 
            "Name": "Also Run On Scope", 
            "Type": 1, 
            "Value": "false"
        }
    ], 
    "Script": "import string\nimport random\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyDataModel import EntityTypes\nfrom OktaManager import OktaManager\nimport json\n\nPROVIDER = \"Okta\"\nACTION_NAME = \"Okta - SetPassword\"\n\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = ACTION_NAME\n    conf = siemplify.get_configuration(PROVIDER)\n    user_ids_or_logins = siemplify.parameters.get('User IDs Or Logins', \"\")\n    new_password = siemplify.parameters['New Password']\n    is_add_random = siemplify.parameters.get(\"Add 10 Random Chars\", \"false\").lower() == \"true\"\n    is_scope = siemplify.parameters.get('Also Run On Scope', \"false\").lower() == \"true\"\n    ids = []\n    res = {}\n    passwords = {}\n    output_message = \"\"\n\n    if not is_add_random:\n        if len(new_password) < 8 or new_password.lower() == new_password or new_password.upper() == new_password:\n            siemplify.end(\"Password requirements were not met. Password requirements: at least 8 characters, a lowercase letter, an uppercase letter, a number, no parts of your username.\", \"false\")\n    okta = OktaManager(api_root=conf['Api Root'], api_token=conf['Api Token'],\n                       verify_ssl=conf['Verify SSL'].lower() == 'true')\n    if user_ids_or_logins:\n        for _id in user_ids_or_logins.split(','):\n            _id = _id.strip()\n            ids.append(_id)\n    message = \"\"\n    if ids:\n        for _id in ids:\n            if is_add_random:\n                allchars = string.ascii_letters + string.punctuation + string.digits\n                random_10 = \"\".join(random.choice(allchars) for x in range(0, 10))\n                new_password += random_10\n            try:\n                res = okta.set_password(_id, new_password=new_password)\n                if res:\n                    passwords.update({_id: new_password})\n                    message += \"The password was set successfully for user with id {0}: {1}\\n\\n\".format(_id, new_password)\n                else:\n                    message = \"The password couldn't be set for user with id {0}.\\n\\n\".format(_id)\n            except Exception as err:\n                siemplify.LOGGER.exception(err)\n                siemplify.LOGGER.error(_id + \": \" + err.message)\n                pass\n    if is_scope:\n        for entity in siemplify.target_entities:\n            if entity.entity_type == EntityTypes.USER or entity.entity_type == EntityTypes.HOSTNAME:\n                if is_add_random:\n                    allchars = string.ascii_letters + string.punctuation + string.digits\n                    random_10 = \"\".join(random.choice(allchars) for x in range(0, 10))\n                    new_password += random_10\n                try:\n                    res = okta.set_password(entity.identifier, new_password=new_password)\n                    if res:\n                        passwords.update({entity.identifier: new_password})\n                        message += \"The password was set successfully for user \\\"{0}\\\": {1}\\n\\n\".format(entity.identifier, new_password)\n                    else:\n                        message += \"The password couldn't be set for user \\\"{0}\\\".\\n\\n\".format(entity.identifier)\n                except Exception as err:\n                    siemplify.LOGGER.exception(err)\n                    siemplify.LOGGER.error(entity.identifier + \": \" + err.message)\n                    pass\n            else:\n                continue\n    if passwords:\n        output_message = message\n    else:\n        output_message = \"No passwords were set. {}\".format(message)\n    siemplify.end(output_message, json.dumps(passwords))\n\nif __name__ == '__main__':\n    main()", 
    "ScriptResultName": "ScriptResult", 
    "SimulationDataJson": "{\"Entities\": [\"HOSTNAME\", \"USERUNIQNAME\"]}", 
    "Version": 6.0
}