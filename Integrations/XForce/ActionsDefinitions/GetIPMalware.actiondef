{
    "CreationTimeUnixTimeInMs": 1536139105316, 
    "Creator": "Admin", 
    "Description": "Query XForce for the malware associated with an IP address", 
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"EntityResult\": {\"malware\": [{\"count\": 13, \"origin\": \"CnC\", \"domain\": \"domain-example.info\", \"last\": \"2016-10-29T06:31:00Z\", \"family\": [\"kasidet\"], \"filepath\": \"dom/tasks.php\", \"ip\": \"0x00000000000000000000ffff08080808\", \"uri\": \"http://domain-example.info/dom/tasks.php\", \"first\": \"2016-10-29T06:31:00Z\", \"host\": \"dom\", \"lastseen\": \"2016-10-29T06:31:00Z\", \"md5\": \"4C10F74CE20328B7CC4207245BC9D000\", \"type\": \"CnC\", \"firstseen\": \"2016-10-29T06:31:00Z\", \"schema\": \"http\"}]}, \"Entity\": \"1.1.1.1\"}]", 
            "ResultName": "JsonResult"
        }
    ], 
    "Id": -1, 
    "IntegrationIdentifier": "XForce", 
    "IsCustom": false, 
    "IsEnabled": true, 
    "ModificationTimeUnixTimeInMs": 1536139105316, 
    "Name": "Get IP Malware", 
    "Parameters": [], 
    "Script": "from SiemplifyDataModel import EntityTypes\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import add_prefix_to_dict_keys, construct_csv, is_dict_in_list\nfrom XForceManager import XForceManager\n\nADDRESS = EntityTypes.ADDRESS\nSCRIPT_NAME = \"IBM XForce - Get IP Malware\"\n\n\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n\n    conf = siemplify.get_configuration('XForce')\n    address = conf['Address']\n    api_key = conf['Api Key']\n    api_password = conf['Api Password']\n    use_ssl = conf['Use SSL'].lower() == 'true'\n\n    xf_manager = XForceManager(api_key, api_password, address, use_ssl)\n\n    malware_count = 0\n    enriched_entities = []\n    entity_with_score = []\n    output_message = ''\n\n    for entity in siemplify.target_entities:\n        if entity.entity_type == ADDRESS and not entity.is_internal:\n            try:\n                report = xf_manager.get_malware_for_ip(entity.identifier)\n                if report:\n                    # Build entity table\n                    entity_csv = []\n                    for malware in report.get('malware'):\n                        families_list = malware.get('family') or []\n                        families = '| '.join(str(family) for family in families_list)\n                        entity_csv.append({\"IP\": entity.identifier, \"MD5\": malware.get('md5'), \"Domain\":\n                            malware.get('domain'), \"First Seen\": malware.get(\"firstseen\"),\n                                           \"Last Seen\": malware.get(\"lastseen\"), \"Count\": malware.get(\"count\"),\n                                           \"Schema\": malware.get(\"schema\"), \"File Path\": malware.get(\"filepath\"),\n                                           \"URI\": malware.get(\"uri\"), \"Origin\": malware.get(\"origin\"), \"Families\": families})\n\n                    # Add entity csv table\n                    siemplify.result.add_entity_table(entity.identifier, construct_csv(entity_csv))\n\n                    malware_count = len(report.get('malware'))\n\n                    # Enrich - Origin\n                    enrich = {\"IP\": entity.identifier, \"Malware Count\": malware_count}\n                    flat_report = add_prefix_to_dict_keys(enrich, \"IBM XForce\")\n                    entity.additional_properties.update(flat_report)\n                    entity.is_enriched = True\n\n                    # Add Insight\n                    if malware_count > 1:\n                        insight_msg = 'IBM XForce - entity was associated with malware'\n                        siemplify.add_entity_insight(entity, insight_msg, triggered_by='XForce')\n\n                    entity_with_score.append({entity.identifier: malware_count})\n                    enriched_entities.append(entity)\n\n            except Exception as e:\n                # An error occurred - skip entity and continue\n                siemplify.LOGGER.error(\"An error occurred on entity: {}.\\n{}.\".format(entity.identifier, str(e)))\n                siemplify.LOGGER.exception(e)\n\n    if entity_with_score:\n        for ip_malware_count in entity_with_score:\n            output_message = '{0} {1} associated with {2} malwares \\n'.format(output_message, ip_malware_count.keys()[0], ip_malware_count.values()[0])\n        siemplify.update_entities(enriched_entities)\n\n    else:\n        output_message = 'No entities were enriched.'\n\n    siemplify.end(output_message, malware_count)\n\n\nif __name__ == \"__main__\":\n    main()\n", 
    "ScriptResultName": "is_malware", 
    "SimulationDataJson": "{\"Entities\": [\"ADDRESS\"]}", 
    "Version": 1.0
}