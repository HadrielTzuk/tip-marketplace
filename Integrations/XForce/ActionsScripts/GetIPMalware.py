from SiemplifyUtils import output_handler
from SiemplifyDataModel import EntityTypes
from ScriptResult import EXECUTION_STATE_FAILED, EXECUTION_STATE_COMPLETED
from SiemplifyAction import SiemplifyAction
from SiemplifyUtils import convert_dict_to_json_result_dict
from TIPCommon import construct_csv, add_prefix_to_dict_keys, extract_configuration_param
from XForceManager import XForceManager, XForceNotFoundError, XForceAccessDeniedError


INTEGRATION_NAME = u"XForce"
SCRIPT_NAME = u"IBM XForce - Get IP Malware"


@output_handler
def main():
    siemplify = SiemplifyAction()
    siemplify.script_name = SCRIPT_NAME

    siemplify.LOGGER.info(u"----------------- Main - Param Init -----------------")
    # INIT INTEGRATION CONFIGURATION:
    address = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u"Address",
                                           is_mandatory=True, input_type=unicode)
    api_key = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u"Api Key",
                                           is_mandatory=True, input_type=unicode)
    api_password = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u"Api Password",
                                           is_mandatory=True, input_type=unicode)
    verify_ssl = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name=u"Verify SSL",
                                             default_value=False, input_type=bool)

    siemplify.LOGGER.info(u"----------------- Main - Started -----------------")

    enriched_entities = []
    entities_with_score = {}
    output_message = u''
    is_risk = u'false'
    json_results = {}
    status = EXECUTION_STATE_COMPLETED

    not_found_entities = []
    access_denied = []
    not_enriched_entities = []

    try:
        xf_manager = XForceManager(api_key, api_password, address, verify_ssl=verify_ssl)

        for entity in siemplify.target_entities:
            if entity.entity_type == EntityTypes.ADDRESS and not entity.is_internal:
                try:
                    siemplify.LOGGER.info(u"Started processing entity: {}".format(entity.identifier))
                    report = xf_manager.get_malware_for_ip(entity.identifier)

                    if report:
                        siemplify.LOGGER.info(u"Found report for entity {}".format(entity.identifier))
                        json_results[entity.identifier] = report

                        # Build entity table
                        entity_csv = []
                        for malware in report.get(u'malware', []):
                            entity_csv = xf_manager.construct_malware_data(malware, entity_csv, entity)

                        # Add entity csv table
                        if entity_csv:
                            siemplify.result.add_entity_table(entity.identifier, construct_csv(entity_csv))

                        malware_count = len(report.get(u'malware') or [])
                        siemplify.LOGGER.info(u"Entity {} is associated with {} malwares".format(entity.identifier, malware_count))

                        # Enrich - Origin
                        flat_report = add_prefix_to_dict_keys({u"Malware Count": malware_count}, u"IBM_XForce")
                        entity.additional_properties.update(flat_report)
                        entity.is_enriched = True

                        # Add Insight and mark as suspicious if malware_count > 0
                        if malware_count > 0:
                            siemplify.LOGGER.info(u"Marking entity {} as suspicious".format(entity.identifier))
                            entity.is_suspicious = True
                            is_risk = u'true'
                            insight_msg = u'IBM XForce - entity was associated with malware'
                            siemplify.add_entity_insight(entity, insight_msg, triggered_by=u'XForce')

                        entities_with_score.update({entity.identifier: malware_count})
                        enriched_entities.append(entity)

                    siemplify.LOGGER.info(u"Finished processing entity {0}".format(entity.identifier))

                except XForceNotFoundError as e:
                    siemplify.LOGGER.error(u"An error occurred on entity: {}.".format(entity.identifier))
                    siemplify.LOGGER.exception(e)
                    not_found_entities.append(entity.identifier)

                except XForceAccessDeniedError as e:
                    siemplify.LOGGER.error(u"An error occurred on entity: {}.".format(entity.identifier))
                    siemplify.LOGGER.exception(e)
                    access_denied.append(entity.identifier)

                except Exception as e:
                    # An error occurred - skip entity and continue
                    siemplify.LOGGER.error(u"An error occurred on entity: {}.".format(entity.identifier))
                    siemplify.LOGGER.exception(e)
                    not_enriched_entities.append(entity.identifier)

        if entities_with_score:
            output_message = u"The following entities were enriched:\n   {}".format(
                u"\n   ".join([u"{} associated with {} malwares".format(ip, count) for ip, count in entities_with_score.items()])
            )

            siemplify.update_entities(enriched_entities)

        if not_found_entities:
            output_message += u"\n\nThe following entities were not found in IBM X-Force:\n   {}".format(
                u"\n   ".join([entity for entity in not_found_entities])
            )

        if access_denied:
            output_message += u"\n\nThe following entities were not enriched - Access was denied:\n   {}".format(
                u"\n   ".join([entity for entity in access_denied])
            )

        if not_enriched_entities:
            output_message += u"\n\nThe following entities were not enriched - Unexpected error:\n   {}".format(
                u"\n   ".join([entity for entity in not_enriched_entities])
            )

    except Exception as e:
        siemplify.LOGGER.error(u"Action didn't complete due to error: {}".format(e))
        siemplify.LOGGER.exception(e)
        status = EXECUTION_STATE_FAILED
        output_message = u"Action didn't complete due to error: {}".format(e)

    # Add JSON
    siemplify.result.add_result_json(convert_dict_to_json_result_dict(json_results))
    siemplify.LOGGER.info(u"----------------- Main - Finished -----------------")
    siemplify.LOGGER.info(u"Status: {}:".format(status))
    siemplify.LOGGER.info(u"Result Value: {}".format(is_risk))
    siemplify.LOGGER.info(u"Output Message: {}".format(output_message))
    siemplify.end(output_message, is_risk, status)


if __name__ == "__main__":
    main()
