from SiemplifyUtils import output_handler
from ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED
from SiemplifyAction import SiemplifyAction
from TIPCommon import extract_configuration_param, extract_action_param, construct_csv
from OrcaSecurityManager import OrcaSecurityManager
from SiemplifyDataModel import InsightSeverity, InsightType
from constants import (
    INTEGRATION_NAME,
    INTEGRATION_DISPLAY_NAME,
    GET_VULNERABILITY_DETAILS_SCRIPT_NAME,
    VULNERABILITIES_TABLE_NAME,
    VULNERABILITIES_MAX_LIMIT,
    SEVERITY_MAPPING,
    OUTPUT_TYPE_JSON
)
from UtilsManager import (
    string_to_multi_value,
    validate_positive_integer,
    write_to_csv_file
)


@output_handler
def main():
    siemplify = SiemplifyAction()
    siemplify.script_name = GET_VULNERABILITY_DETAILS_SCRIPT_NAME
    siemplify.LOGGER.info("----------------- Main - Param Init -----------------")

    api_root = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="API Root",
                                           is_mandatory=True, print_value=True)
    api_key = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="API Key",
                                          is_mandatory=False)
    api_token = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="API Token",
                                            is_mandatory=False)
    verify_ssl = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Verify SSL",
                                             input_type=bool, print_value=True)

    cve_ids = string_to_multi_value(extract_action_param(siemplify, param_name="CVE IDs", is_mandatory=True,
                                                         print_value=True))
    fields_to_return = string_to_multi_value(extract_action_param(siemplify, param_name="Fields To Return",
                                                                  print_value=True))
    output_type = extract_action_param(siemplify, param_name="Output", print_value=True)
    create_insight = extract_action_param(siemplify, param_name="Create Insight", print_value=True, input_type=bool)
    max_assets_to_return = extract_action_param(siemplify, param_name="Max Assets To Return", print_value=True,
                                                default_value=50, input_type=int)

    siemplify.LOGGER.info("----------------- Main - Started -----------------")

    result_value = True
    status = EXECUTION_STATE_COMPLETED
    output_message = ""
    json_result, csv_data, csv_results = [], [], []
    successful_cves, failed_cves = [], []

    try:
        validate_positive_integer(
            number=max_assets_to_return,
            err_msg="Max Assets To Return parameter should be positive"
        )
        if max_assets_to_return > VULNERABILITIES_MAX_LIMIT:
            raise Exception(
                f'Max Assets To Return parameter should be less than maximum limit parameter: '
                f'{VULNERABILITIES_MAX_LIMIT}')

        manager = OrcaSecurityManager(api_root=api_root, api_key=api_key, api_token=api_token, verify_ssl=verify_ssl,
                                      siemplify_logger=siemplify.LOGGER)

        for cve_id in cve_ids:
            try:

                results, for_insights = manager.get_vulnerability_results(
                    cve_id=cve_id, limit=max_assets_to_return, create_insight=create_insight
                )
                if not results:
                    failed_cves.append(cve_id)
                    continue
                first_result = results[0]

                json_result.append(
                    {
                        "cve_id": cve_id,
                        "results": [
                            {field: res.flat_data.get(field) for field in fields_to_return} for res in results
                        ]
                        if fields_to_return
                        else [res.to_json() for res in results],
                    }
                )
                if fields_to_return:
                    csv_results.extend(
                        [
                            {field: res.flat_data.get(field) for field in fields_to_return}
                            for res in results
                        ]
                    )
                else:
                    csv_results.extend([res.flat_data for res in results])
                csv_data.append(first_result.to_csv(count=len(results)))

                if create_insight:
                    asset_names = list(set([res.asset_name for res in for_insights]))
                    severities = {
                        val: SEVERITY_MAPPING[val]
                        for val in list(set([res.severity for res in for_insights]))
                    }
                    max_severity = max(severities, key=severities.get)
                    siemplify.create_case_insight(
                        triggered_by=INTEGRATION_NAME,
                        title=f"{cve_id}",
                        content=first_result.to_insight(asset_names=asset_names, severity=max_severity),
                        entity_identifier="",
                        severity=InsightSeverity.INFO,
                        insight_type=InsightType.General,
                    )

                successful_cves.append(cve_id)
            except Exception as e:
                failed_cves.append(cve_id)
                siemplify.LOGGER.error(f"An error occurred on cve_id: {cve_id}. {e}.")
                siemplify.LOGGER.exception(e)

        if successful_cves:
            if output_type == OUTPUT_TYPE_JSON:
                siemplify.result.add_result_json(json_result)
            else:
                siemplify.result.add_result_json({
                    "results": write_to_csv_file(siemplify, csv_results)
                })
            siemplify.result.add_data_table(VULNERABILITIES_TABLE_NAME, construct_csv(csv_data))

            output_message += f"Successfully enriched the following vulnerabilities using information from" \
                              f" {INTEGRATION_NAME}: {', '.join(successful_cves)}\n"
        else:
            output_message = "None of the provided vulnerabilities were enriched.\n"
            result_value = False

        if failed_cves:
            output_message += f"Action wasn't able to enrich the following vulnerabilities using information from" \
                              f" {INTEGRATION_NAME}: {', '.join(failed_cves)}\n"

    except Exception as e:
        output_message = f"Error executing action {GET_VULNERABILITY_DETAILS_SCRIPT_NAME}. Reason: {e}"
        result_value = False
        status = EXECUTION_STATE_FAILED
        siemplify.LOGGER.error(output_message)
        siemplify.LOGGER.exception(e)

    siemplify.LOGGER.info("----------------- Main - Finished -----------------")
    siemplify.LOGGER.info("Status: {}".format(status))
    siemplify.LOGGER.info("Result: {}".format(result_value))
    siemplify.LOGGER.info("Output Message: {}".format(output_message))

    siemplify.end(output_message, result_value, status)


if __name__ == "__main__":
    main()
