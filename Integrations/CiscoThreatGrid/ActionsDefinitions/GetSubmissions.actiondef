{
    "CreationTimeUnixTimeInMs": 1528905266731,
    "Creator": "admin",
    "Description": "Get submissions by entity",
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"EntityResult\": [{\"Name\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894.exe\", \"Submitted\": \"2018-06-13T09:16:12Z\", \"Score\": 95, \"Indicators\": 20, \"SHA256\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894\", \"MD5\": \"5fa6b79842cec6d8d172fb16e56b7247\"}, {\"Name\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894.exe\", \"Submitted\": \"2018-06-13T09:15:51Z\", \"Score\": 95, \"Indicators\": 21, \"SHA256\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894\", \"MD5\": \"5fa6b79842cec6d8d172fb16e56b7247\"}, {\"Name\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894.exe\", \"Submitted\": \"2018-06-13T09:14:38Z\", \"Score\": 95, \"Indicators\": 20, \"SHA256\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894\", \"MD5\": \"5fa6b79842cec6d8d172fb16e56b7247\"}, {\"Name\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894.exe\", \"Submitted\": \"2018-06-13T09:13:12Z\", \"Score\": 95, \"Indicators\": 19, \"SHA256\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894\", \"MD5\": \"5fa6b79842cec6d8d172fb16e56b7247\"}, {\"Name\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894.exe\", \"Submitted\": \"2018-06-13T09:12:27Z\", \"Score\": 95, \"Indicators\": 19, \"SHA256\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894\", \"MD5\": \"5fa6b79842cec6d8d172fb16e56b7247\"}], \"Entity\": \"dfdca325e9a23bb0131d1f887480481f961f3df919a0609d6472381e76a53894\"}]",
            "ResultName": "JsonResult"
        }
    ],
    "Id": -1,
    "IntegrationIdentifier": "CiscoThreatGrid",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1528905266731,
    "Name": "Get Submissions",
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1528905266731,
            "CustomActionId": -1,
            "DefaultValue": "50",
            "Description": "Mark as suspicious if max threat score pass the threshold",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1528905266731,
            "Name": "Threshold",
            "Type": 0,
            "Value": "50"
        },
        {
            "CreationTimeUnixTimeInMs": 1528905266731,
            "CustomActionId": -1,
            "DefaultValue": 10,
            "Description": "Specify how many submissions to return per entitiy. Default: 10. Maximum: 100",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1528905266731,
            "Name": "Max Submissions To Return",
            "Type": 0,
            "Value": 10
        }
    ],
    "Script": "from CiscoThreatGridManager import CiscoThreatGridManager\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyUtils import construct_csv\nfrom SiemplifyAction import SiemplifyAction\nimport arrow\nimport base64\n\n\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = 'CiscoThreatGrid - GetSubmissions'\n\n    conf = siemplify.get_configuration('CiscoThreatGrid')\n    server_addr = conf['Api Root']\n    api_key = conf['Api Key']\n    use_ssl = conf['Use SSL'].lower() == 'true'\n    cisco_threat_grid = CiscoThreatGridManager(server_addr, api_key, use_ssl)\n\n    threshold = int(siemplify.parameters['Threshold'])\n\n    enriched_entities = []\n\n    for entity in siemplify.target_entities:\n        try:\n            submissions = []\n\n            if entity.entity_type == EntityTypes.ADDRESS or entity.entity_type == EntityTypes.FILEHASH:\n                submissions = cisco_threat_grid.get_submissions(entity.identifier)\n            elif entity.entity_type == EntityTypes.HOSTNAME:\n                submissions = cisco_threat_grid.get_submissions(entity.identifier, 'domain')\n            elif entity.entity_type == EntityTypes.PROCESS:\n                submissions = cisco_threat_grid.get_submissions(entity.identifier, 'process')\n            elif entity.entity_type == EntityTypes.URL:\n                submissions = cisco_threat_grid.get_submissions(entity.identifier, 'url')\n            elif entity.entity_type == EntityTypes.FILENAME:\n                submissions = cisco_threat_grid.get_submissions(entity.identifier, 'path')\n\n            if submissions:\n                submissions_table = cisco_threat_grid.create_submissions_table(submissions)\n                csv_output = construct_csv(submissions_table)\n                siemplify.result.add_entity_table(\n                    '{} - Submissions'.format(\n                        entity.identifier),\n                                                  csv_output)\n\n                submissions = sorted(submissions, key=lambda submission: arrow.get(submission['item']['submitted_at']).timestamp)\n                most_recent_sample_id = submissions[-1]['item']['sample']\n                \n                try:\n                    # Download report\n                    full_report = cisco_threat_grid.get_sample_report(\n                        most_recent_sample_id)\n                    siemplify.result.add_entity_attachment(\n                        '{} - Most Recent Analysis Report'.format(entity.identifier),\n                        '{}.html'.format(most_recent_sample_id, ), base64.b64encode(full_report))\n                except Exception as e:\n                    # Attachment cannot be larger than 3 MB\n                    siemplify.LOGGER.error(\n                        \"Can not add html report for {}:\\n{}.\".format(\n                            most_recent_sample_id,\n                            str(e)))\n\n                try:\n                    # Download pcap\n                    pcap = cisco_threat_grid.get_sample_pcap(most_recent_sample_id)\n                    siemplify.result.add_entity_attachment(\n                        '{} - Most Recent Network Pcap'.format(entity.identifier),\n                        '{}.pcap'.format(most_recent_sample_id, ), base64.b64encode(pcap))\n                except Exception as e:\n                    # Attachment cannot be larger than 3 MB\n                    siemplify.LOGGER.error(\n                        \"Can not add pcap for {}:\\n{}.\".format(most_recent_sample_id,\n                                                               str(e)))\n\n                try:\n                    # Download screenshot\n                    screenshot = cisco_threat_grid.get_sample_screenshot(\n                        most_recent_sample_id)\n                    siemplify.result.add_entity_attachment(\n                        '{} - Most Recent Screenshot'.format(entity.identifier),\n                        '{}.png'.format(most_recent_sample_id, ), base64.b64encode(screenshot))\n                except Exception as e:\n                    # Attachment cannot be larger than 3 MB\n                    siemplify.LOGGER.error(\n                        \"Can not add screenshot for {}:\\n{}.\".format(most_recent_sample_id,\n                                                               str(e)))\n\n                try:\n                    threat = cisco_threat_grid.get_sample_threat(most_recent_sample_id)\n                    threat_table = cisco_threat_grid.create_threat_table(\n                        threat)\n                    if threat_table:\n                        csv_output = construct_csv(threat_table)\n                        siemplify.result.add_entity_table(\n                            \"{} - Most Recent Threat Report\".format(entity.identifier),\n                            csv_output\n                        )\n                except Exception as e:\n                    # Attachment cannot be larger than 3 MB\n                    siemplify.LOGGER.error(\n                        \"Can not add threat table for {}:\\n{}.\".format(\n                            most_recent_sample_id,\n                            str(e)))\n\n                max_score = cisco_threat_grid.get_max_threat_score(submissions)\n                entity.additional_properties.update({\n                    'ThreatGrid Max Score': max_score\n                })\n\n                entity.is_enriched = True\n                enriched_entities.append(entity)\n                if max_score > threshold:\n                    entity.is_suspicious = True\n\n        except Exception as e:\n            # An error occurred - skip entity and continue\n            siemplify.LOGGER.error(\n                \"An error occurred on entity: {}.\\n{}.\".format(entity.identifier, str(e)))\n            siemplify.LOGGER._log.exception(e)\n\n    if enriched_entities:\n        entities_names = [entity.identifier for entity in enriched_entities]\n        output_message = 'Cisco Threat Grid - Found submissions for the following entities\\n' + '\\n'.join(\n            entities_names)\n\n        siemplify.update_entities(enriched_entities)\n\n    else:\n        output_message = 'No suitable entities found.\\n'\n\n    siemplify.end(output_message, 'true')\n\n\nif __name__ == \"__main__\":\n    main()\n\n",
    "ScriptResultName": "success",
    "SimulationDataJson": "{\"Entities\": [\"DestinationURL\", \"FILEHASH\", \"PROCESS\", \"HOSTNAME\", \"FILENAME\", \"ADDRESS\"]}",
    "Version": 1.0,
    "IsAsync": true
}