{
    "CreationTimeUnixTimeInMs": 1543937885252, 
    "Creator": "Admin", 
    "Description": "Fetches mail EML's.", 
    "Id": -1, 
    "Integration": "Email", 
    "IsConnectorRulesSupported": false, 
    "IsCustom": false, 
    "IsEnabled": true, 
    "MappingRules": [], 
    "ModificationTimeUnixTimeInMs": 1543937885260, 
    "Name": "Email EML Connector", 
    "Parameters": [
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885282, 
            "DefaultValue": "App", 
            "Description": "The field name used to determine the device product", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1543937885282, 
            "Name": "DeviceProductField", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885283, 
            "DefaultValue": "Name", 
            "Description": "The field name used to determine the event name (sub-type)", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1543937885283, 
            "Name": "EventClassId", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885284, 
            "DefaultValue": "30", 
            "Description": "The timeout limit (in seconds) for the python process running current script", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1543937885284, 
            "Name": "PythonProcessTimeout", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885284, 
            "DefaultValue": "", 
            "Description": "Mail address to pull emails from. e.g. user@gmail.com", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885284, 
            "Name": "Mail Address", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885284, 
            "DefaultValue": "", 
            "Description": "e.g. imap.gmail.com", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885284, 
            "Name": "IMAP Server Address", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885285, 
            "DefaultValue": "", 
            "Description": "Imap port. e.g. 993", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885285, 
            "Name": "IMAP Port", 
            "Type": 1
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885285, 
            "DefaultValue": "", 
            "Description": "Mail address to pull emails from. e.g. user@gmail.com", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885285, 
            "Name": "Username", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885285, 
            "DefaultValue": "", 
            "Description": "", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885285, 
            "Name": "Password", 
            "Type": 3
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885286, 
            "DefaultValue": "", 
            "Description": "The timezone configured in the server, examples (1. UTC, 2. Asia/Jerusalem)", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885286, 
            "Name": "Server Time Zone", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525167465721, 
            "DefaultValue": null, 
            "Description": "If defined - connector will extract the environment from the specified event field. You can manipulate the field data using the Regex pattern field to extract specific string. In case the the extracted environment field and Siemplify environment name are not equal - you can map them in the map.json that is auto-generated on the first run, inside the <run-folder>.<run-folder> = C:\\Siemplify_Server\\Scripting\\SiemplifyConnectorExecution<Connector_Folder>", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1525167465721, 
            "Name": "Environment Field Name", 
            "Type": 1
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525167465721, 
            "DefaultValue": null, 
            "Description": "If defined - the connector will implement the specific RegEx pattern on the data from \"envirnment field\" to extract specific string. For example - extract domain from sender's address: \"(?<=@)(\\S+$)\"", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1525167465721, 
            "Name": "Environment Regex Pattern", 
            "Type": 1
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885287, 
            "DefaultValue": "1", 
            "Description": "Max number of days to fetch mails since. e.g. 3", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885287, 
            "Name": "Offset Time In Days", 
            "Type": 1
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885285, 
            "DefaultValue": "10", 
            "Description": "Max count of mails to pull in one cycle", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885285, 
            "Name": "Max Emails Per Cycle", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885287, 
            "DefaultValue": "true", 
            "Description": "If checked, pull only unread mails", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885287, 
            "Name": "Fetch Only Unread", 
            "Type": 0
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885288, 
            "DefaultValue": "true", 
            "Description": "Indicates whether to use ssl on connection or not.", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885288, 
            "Name": "IMAP USE SSL", 
            "Type": 0
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1543937885288, 
            "DefaultValue": "true", 
            "Description": "Indicates whether to encode the email data with UTF-8 or not. Setting to True is recommended.", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1543937885288, 
            "Name": "Encode Data as UTF-8", 
            "Type": 0
        }, 
        {
            "CreationTimeUnixTimeInMs": 1574099687000, 
            "Name": "Proxy Server Address", 
            "ModificationTimeUnixTimeInMs": 1574099687000, 
            "Type": 2, 
            "DefaultValue": null, 
            "Description": "The address of the proxy server to use.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2
        }, 
        {
            "CreationTimeUnixTimeInMs": 1574099687000, 
            "Name": "Proxy Username", 
            "ModificationTimeUnixTimeInMs": 1574099687000, 
            "Type": 2, 
            "DefaultValue": null, 
            "Description": "The proxy username to authenticate with.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2
        }, 
        {
            "CreationTimeUnixTimeInMs": 1525167465721, 
            "Name": "Proxy Password", 
            "ModificationTimeUnixTimeInMs": 1525167465721, 
            "Type": 3, 
            "DefaultValue": null, 
            "Description": "The proxy password to authenticate with.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2
        }
    ], 
    "ProductToVisualFamilyRecords": [], 
    "Rules": [], 
    "Script": "# -*- coding: utf-8 -*-\n# ==============================================================================\n# title           :EmailEMLConnector.py\n# author          :victor@siemplify.co\n# date            :4-12-18\n# python_version  :2.7\n# product_version : No version for mail.\n# ==============================================================================\n# =====================================\n#              IMPORTS                #\n# =====================================\nfrom SiemplifyConnectors import *\nfrom EmailManager import EmailManager, EMLParser\nfrom SiemplifyUtils import dict_to_flat, unix_now, convert_datetime_to_unix_time, utc_now\nimport datetime\n\n# =====================================\n#              CONSTANTS              #\n# =====================================\nDEFAULT_PRODUCT = 'Mail EML'\nDEFAULT_NAME = 'Mail has no subject.'\nDEFAULT_MAIL_FOLDER = 'inbox'\nDEFAULT_TIME_FORMAT = '%a, %d %b %Y %X'\n\nEML_DATE_KEY = \"Date\"\nEML_SUBJECT_KEY = \"subject\"\n\n\n# =====================================\n#               Classes               #\n# =====================================\nclass EmailEMLConnector(object):\n    def __init__(self, logger):\n        self.logger = logger\n\n    @staticmethod\n    def validate_timestamp_offset(time_datetime, offset_in_days=2):\n        \"\"\"\n        Validate if timestamp in offset range.\n        :param time_stamp_unixtime: {long}\n        :param offset_in_days: {integer}\n        :return: unixtime: if time not in offset return offset time {long}\n        \"\"\"\n        offset_datetime = utc_now() - datetime.timedelta(days=offset_in_days)\n\n        if time_datetime < offset_datetime:\n            return offset_datetime\n        return time_datetime\n\n    @staticmethod\n    def string__with_postfix_to_datetime(time_string, time_format):\n        \"\"\"\n        Will get rid of the time string postfix which is cause problem converting to datetime.\n        :param time_string: {string} Time string\n        :param time_format: {string}\n        :return: {datetime} Datetime object.\n        \"\"\"\n        cover = len(datetime.datetime.now().strftime(time_format))\n        return datetime.datetime.strptime(time_string[:cover], time_format)\n\n    def create_case(self, eml_content, mail_id, environment, mail_time_format=DEFAULT_TIME_FORMAT):\n        \"\"\"\n        Create case package.\n        :param eml_content: {string} Raw EML content.\n        :param mail_id: {string} Mail ID.\n        :param environment: {string} Case environment.\n        :param mail_time_format: {string} Mail time format.\n        :return: {CaseInfo} Case package object.\n        \"\"\"\n        flat_eml = dict_to_flat(eml_content)\n        case_info = CaseInfo()\n\n        case_info.name = flat_eml.get(EML_SUBJECT_KEY, DEFAULT_NAME)\n        case_info.rule_generator = case_info.name\n        try:\n            case_info.start_time = case_info.end_time = self.string__with_postfix_to_datetime(flat_eml.get(EML_DATE_KEY),\n                                                                                              mail_time_format)\n        except Exception as err:\n            error_message = \"Failed to convert time for mail with ID: {0}\".format(mail_id)\n            self.logger.error(error_message)\n            self.logger.exception(err)\n            case_info.start_time = case_info.end_time = 1\n\n        case_info.identifier = case_info.ticket_id = case_info.display_id = mail_id\n        case_info.priority = 40  # Defaulting to Low - can add logic here to set priority based on event data.\n        case_info.device_vendor = case_info.device_product = DEFAULT_PRODUCT\n        case_info.source_system_name = \"Custom\"\n        case_info.environment = environment\n        case_info.events = [flat_eml]\n\n        return case_info\n\n\ndef main(test_handler=False):\n    output_variables = {}\n    log_items = []\n    cases = []\n    connector_scope = SiemplifyConnectorExecution()\n\n    try:\n        if test_handler:\n            connector_scope.LOGGER.info(\"---------- Connector Test Started. ----------\")\n        else:\n            connector_scope.LOGGER.info(\"---------- Connector Interation Started. ----------\")\n\n        mail_address = connector_scope.parameters.get('Mail Address')\n        host = connector_scope.parameters.get('Host')\n        imap_port = int(connector_scope.parameters.get('IMAP Port', 993))\n        username = connector_scope.parameters.get('Username')\n        password = connector_scope.parameters.get('Password')\n        folder_name = connector_scope.parameters.get('Folder Name', DEFAULT_MAIL_FOLDER)\n        mail_time_format = connector_scope.parameters.get('Mail Time Format', DEFAULT_TIME_FORMAT)\n        max_days_backwards = int(connector_scope.parameters.get('Max Days Backwards', 2))\n        unread_only = connector_scope.parameters.get('Fetch Only Unread', 'false').lower() == 'true'\n        mark_as_read = connector_scope.parameters.get('Mark Fetched Mails As Read', 'false').lower() == 'true'\n        verify_ssl = connector_scope.parameters.get('Verify SSL', 'false').lower() == 'true'\n\n        if verify_ssl:\n            connector_scope.LOGGER.info(\"Verify SSL is on.\")\n\n        email_manager = EmailManager(mail_address)\n        eml_connector = EmailEMLConnector(connector_scope.LOGGER)\n        eml_parser = EMLParser()\n\n        email_manager.login_imap(host=host, port=imap_port, username=username, password=password, use_ssl=verify_ssl)\n\n        last_run_time = eml_connector.validate_timestamp_offset(connector_scope.fetch_timestamp(datetime_format=True),\n                                                                max_days_backwards)\n\n        connector_scope.LOGGER.info(\"Fetched last run time: {0}\".format(convert_datetime_to_unix_time(last_run_time)))\n\n        current_time = unix_now()\n\n        mail_ids = email_manager.receive_mail_ids(folder_name=folder_name, only_unread=unread_only,\n                                                  time_filter=last_run_time)\n\n        connector_scope.LOGGER.info(\"Found '{0}' new mails with IDs: {1}.\".format(\n            len(mail_ids),\n            \",\".join(mail_ids)\n        ))\n\n        if test_handler:\n            mail_ids = mail_ids[-1]\n\n        for mail_id in mail_ids:\n            try:\n                connector_scope.LOGGER.info(\"Running on mail with ID: {0}\".format(mail_id))\n                mail_content = email_manager.get_message_data_by_message_id(mail_id, mark_as_read=mark_as_read,\n                                                                            attach_original_eml=True)\n                original_eml = mail_content.get('original_message')\n                parsed_eml = eml_parser.parse_eml(original_eml)\n                case = eml_connector.create_case(eml_content=parsed_eml, mail_id=mail_id, mail_time_format=mail_time_format,\n                                                 environment=connector_scope.context.connector_info.environment)\n\n                is_overflowed = False\n\n                try:\n                    is_overflowed = connector_scope.is_overflowed_alert(\n                        environment=case.environment,\n                        alert_identifier=str(case.ticket_id),\n                        alert_name=str(case.rule_generator),\n                        product=str(case.device_product))\n\n                except Exception as err:\n                    connector_scope.LOGGER.error(\n                        'Error validation connector overflow, ERROR: {0}'.format(unicode(err)))\n                    connector_scope.LOGGER.exception(err)\n                    if test_handler:\n                        raise\n\n                if is_overflowed:\n                    connector_scope.LOGGER.info(\n                        \"{alert_name}-{alert_identifier}-{environment}-{product} found as overflow alert. Skipping.\"\n                            .format(alert_name=str(case.rule_generator),\n                                    alert_identifier=str(case.ticket_id),\n                                    environment=str(case.environment),\n                                    product=str(case.device_product)))\n                else:\n                    cases.append(case)\n                    connector_scope.LOGGER.info('Case with display id \"{0}\" was created.'.format(case.display_id))\n\n            except Exception as err:\n                error_message = 'Failed creating case for mail with ID \"{0}\", ERROR: {1}'.format(\n                    mail_id,\n                    err.message\n                )\n                connector_scope.LOGGER.error(error_message)\n                connector_scope.LOGGER.exception(err)\n                if test_handler:\n                    raise\n\n        if not test_handler:\n            connector_scope.save_timestamp(current_time)\n\n        connector_scope.return_package(cases, output_variables, log_items)\n\n    except Exception as err:\n        connector_scope.LOGGER.error('Got exception on main handler. Error: {0}'.format(err))\n        connector_scope.LOGGER.exception(err)\n        if test_handler:\n            raise\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2 or sys.argv[1] == 'True':\n        print \"Main execution started\"\n        main()\n    else:\n        print \"Test execution started\"\n        main(test_handler=True)\n", 
    "SimulationUseCases": {
        "CasesForUseCase": [], 
        "UseCaseName": null
    }, 
    "Version": 8
}