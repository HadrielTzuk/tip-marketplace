from MandiantManager import MandiantManager
from ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED
from SiemplifyAction import SiemplifyAction
from SiemplifyDataModel import InsightSeverity, InsightType
from SiemplifyUtils import output_handler, convert_dict_to_json_result_dict
from TIPCommon import extract_configuration_param, extract_action_param, string_to_multi_value, construct_csv
from UtilsManager import validate_positive_integer
from constants import INTEGRATION_NAME, GET_MALWARE_DETAILS_SCRIPT_NAME, DEFAULT_LIMIT, MALWARE_TABLE_NAME


@output_handler
def main():
    siemplify = SiemplifyAction()
    siemplify.script_name = GET_MALWARE_DETAILS_SCRIPT_NAME
    siemplify.LOGGER.info("----------------- Main - Param Init -----------------")

    ui_root = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="UI Root",
                                          is_mandatory=True, print_value=True)
    api_root = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="API Root",
                                           is_mandatory=True, print_value=True)
    client_id = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Client ID",
                                            is_mandatory=True)
    client_secret = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Client Secret",
                                                is_mandatory=True)
    verify_ssl = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Verify SSL",
                                             input_type=bool, print_value=True)

    malware_names = string_to_multi_value(extract_action_param(siemplify, param_name="Malware Names", print_value=True,
                                                               is_mandatory=True))
    create_insight = extract_action_param(siemplify, param_name="Create Insight", print_value=True, input_type=bool)
    fetch_iocs = extract_action_param(siemplify, param_name="Fetch Related IOCs", print_value=True, input_type=bool)
    max_limit_for_iocs = extract_action_param(siemplify, param_name="Max Related IOCs To Return", print_value=True,
                                              input_type=int, default_value=DEFAULT_LIMIT)

    siemplify.LOGGER.info("----------------- Main - Started -----------------")

    result_value = True
    status = EXECUTION_STATE_COMPLETED
    output_message = ""
    successful_entities, failed_entities = [], []
    json_result, csv_result = {}, []

    try:
        validate_positive_integer(
            number=max_limit_for_iocs,
            err_msg="Max Related IOCs To Return parameter should be positive"
        )

        manager = MandiantManager(api_root=api_root, client_id=client_id, client_secret=client_secret,
                                  verify_ssl=verify_ssl, siemplify_logger=siemplify.LOGGER,
                                  force_check_connectivity=True)

        for malware_name in malware_names:
            try:
                siemplify.LOGGER.info(f"Started processing entity: {malware_name}")
                result = manager.get_malware_details(identifier=malware_name)
                result.set_report_link(ui_root)

                json_result[malware_name] = result.to_json()
                csv_result.append(result.to_table())

                if fetch_iocs:
                    related_indicators = manager.get_malware_indicators(identifier=result.id,
                                                                        limit=max_limit_for_iocs)
                    if related_indicators:
                        json_result[malware_name].update({
                            "indicators": [ind.to_json() for ind in related_indicators]
                        })

                if create_insight:
                    siemplify.create_case_insight(triggered_by=INTEGRATION_NAME,
                                                  title=f"{malware_name}",
                                                  content=result.to_insight(),
                                                  entity_identifier="",
                                                  severity=InsightSeverity.INFO,
                                                  insight_type=InsightType.General)

                successful_entities.append(malware_name)

            except Exception as e:
                failed_entities.append(malware_name)
                siemplify.LOGGER.error(f"An error occurred on entity: {malware_name}.")
                siemplify.LOGGER.exception(e)
            siemplify.LOGGER.info(f"Finish processing entity: {malware_name}")

        if successful_entities:
            output_message += f"Successfully enriched the following malware using information from {INTEGRATION_NAME}:"\
                              f" {', '.join(successful_entities)}\n"
            siemplify.result.add_result_json(convert_dict_to_json_result_dict(json_result))
            siemplify.result.add_data_table(MALWARE_TABLE_NAME, construct_csv(csv_result))

            if failed_entities:
                output_message += f"Action wasn't able to enrich the following malware using information from " \
                                  f"{INTEGRATION_NAME}: {', '.join(failed_entities)}"
        else:
            output_message = "No malware information was found."
            result_value = False

    except Exception as e:
        result_value = False
        status = EXECUTION_STATE_FAILED
        output_message = f"Error executing action {GET_MALWARE_DETAILS_SCRIPT_NAME}. Reason: {e}"
        siemplify.LOGGER.error(output_message)
        siemplify.LOGGER.exception(e)

    siemplify.LOGGER.info('----------------- Main - Finished -----------------')
    siemplify.LOGGER.info(f'\n  status: {status}\n  is_success: {result_value}\n  output_message: {output_message}')
    siemplify.end(output_message, result_value, status)


if __name__ == "__main__":
    main()
