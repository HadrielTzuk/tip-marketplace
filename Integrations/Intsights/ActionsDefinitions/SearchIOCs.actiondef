{
    "CreationTimeUnixTimeInMs": 1532861679148,
    "Creator": "Admin",
    "Description": "Search IOCs",
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"Entity\":\"http://markossolomon.com/F1q7QX.php\",\"EntityResult\":{\"value\":\"http://markossolomon.com/F1q7QX.php\",\"type\":\"Urls\",\"status\":\"Retired\",\"severity\":\"Low\",\"score\":10,\"lastUpdateDate\":\"2020-03-03T21:29:17.874Z\",\"lastSeen\":\"2019-10-22T09:46:14.000Z\",\"firstSeen\":\"2015-11-05T01:23:46.000Z\",\"relatedMalware\":[\"cryptowall\"],\"relatedCampaigns\":[],\"relatedThreatActors\":[],\"reportedFeeds\":[{\"id\":\"587cc90ac294fxxxxxxxxxxx\",\"name\":\"Ransomware Tracker\",\"confidenceLevel\":2}],\"whitelisted\":false,\"tags\":[]}},{\"Entity\":\"49.236.xxx.xxx\",\"EntityResult\":{\"value\":\"185.220.xxx.xxx\",\"type\":\"IpAddresses\",\"status\":\"Retired\",\"severity\":\"High\",\"score\":70,\"lastUpdateDate\":\"2022-08-22T07:27:31.372Z\",\"lastSeen\":\"2022-08-22T07:19:38.648Z\",\"firstSeen\":\"2020-03-19T15:50:56.971Z\",\"geolocation\":\"DE\",\"relatedMalware\":[\"vulcanops\"],\"relatedCampaigns\":[\"log4j-cve-2021-xxxxx\",\"log4shell\"],\"relatedThreatActors\":[\"primitivebear\"],\"reportedFeeds\":[{\"id\":\"5935163fcadf65xxxxxxxxxx\",\"name\":\"Threat Library\",\"confidenceLevel\":3}],\"whitelisted\":false,\"tags\":[\"log4j - cve-2021-xxxxx campaign\"]}}]",
            "ResultName": "JsonResult"
        }
    ],
    "Id": -1,
    "IntegrationIdentifier": "Intsights",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1532861679148,
    "Name": "Search IOCs",
    "Parameters": [],
    "Script": "from IntsightsManager import IntsightsManager\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import construct_csv, dict_to_flat, add_prefix_to_dict\nimport json\n\nSCRIPT_NAME = \"Intsights - SearchIOCs\"\nSEVERITY_VALUES = [\"Medium\", \"High\"]\nIOC_LINK = \"{}/#/tip/investigation/?q={}\"\n\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    conf = siemplify.get_configuration('Intsights')\n    server_address = conf['Api Root']\n    email = conf['Email']\n    password = conf['Password']\n    verify_ssl = conf.get('Verify SSL', 'False').lower() == 'true'\n    intsights_manager = IntsightsManager(server_address, email, password,\n                                         api_login=False, verify_ssl=verify_ssl)\n\n    enriched_entities =[]\n\n    for entity in siemplify.target_entities:\n        try:\n            iocs_data = intsights_manager.search_iocs(entity.identifier)\n\n            if iocs_data:\n                if iocs_data.get('IocSourcesData'):\n                    siemplify.result.add_json(\n                        '{} - IOCS Sources:'.format(\n                            entity.identifier),\n                        json.dumps(iocs_data.get('IocSourcesData')))\n\n                    if iocs_data.get(\"PublicSearchData\"):\n                        public_search_data = iocs_data[\"PublicSearchData\"]\n\n                        if public_search_data.get(\"AdditionalInfo\"):\n                            # If additional info exists - expand the original\n                            # dict with its data (for defining enrichment groups\n                            # later)\n                            public_search_data.update(public_search_data[\"AdditionalInfo\"])\n                            del public_search_data[\"AdditionalInfo\"]\n\n                        public_search_data = dict_to_flat(iocs_data[\"PublicSearchData\"])\n                        public_search_data = add_prefix_to_dict(public_search_data, \"Intsights\")\n                        entity.additional_properties.update(public_search_data)\n                        entity.is_enriched = True\n\n                        link = IOC_LINK.format(server_address, entity.identifier)\n                        siemplify.result.add_entity_link(entity.identifier, link)\n                        siemplify.LOGGER.info(json.dumps(public_search_data))\n\n                        if public_search_data.get(\"Severity\", {}).get(\"Value\") in SEVERITY_VALUES:\n                            entity.is_suspicious = True\n                            siemplify.add_entity_insight(entity,\n                                                         \"{} was found suspicious\".format(\n                                                             entity.identifier),\n                                                         triggered_by='Intsights')\n\n                    enriched_entities.append(entity)\n\n        except Exception as e:\n            # An error occurred - skip entity and continue\n            siemplify.LOGGER.error(\"An error occurred on entity: {}.\\n{}.\".format(entity.identifier, str(e)))\n            siemplify.LOGGER.exception(e)\n\n    if enriched_entities:\n        entities_names = [entity.identifier for entity in enriched_entities]\n        output_message = \"IOCs were found for the following entities:\\n:\" +\\\n                         '\\n'.join(entities_names)\n\n        siemplify.update_entities(enriched_entities)\n        result_value = 'true'\n\n    else:\n        output_message = \"No IOCs were found.\"\n        result_value = 'false'\n\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == '__main__':\n    main()\n",
    "ScriptResultName": "success",
    "Version": 1.0,
    "SimulationDataJson": "{\"Entities\": []}"
}