{
    "CreationTimeUnixTimeInMs": 1532525727148, 
    "Creator": "admin", 
    "Description": "Blacklist check returns if Domain or IP were backlisted", 
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"EntityResult\": [{\"Info\": \"Blacklisted by SURBL multi\", \"Name\": \"SURBL multi\", \"PublicDescription\": null, \"IsExcludedByUser\": false, \"BlacklistReasonDescription\": \"Listed\", \"BlacklistResponseTime\": \"63\", \"Url\": \"https://mxtoolbox.com/Problem/blacklist/SURBL-multi?page=prob_blacklist&showlogin=1&hidetoc=1&action=blacklist:chinatlz.com\", \"BlacklistReasonCode\": \"1.1.1.1\", \"BlacklistTTL\": \"180\", \"ID\": 285}], \"Entity\": \"chinatlz.com\"}]", 
            "ResultName": "JsonResult"
        }
    ], 
    "Id": -1, 
    "IntegrationIdentifier": "MXToolBox", 
    "IsCustom": false, 
    "IsEnabled": true, 
    "ModificationTimeUnixTimeInMs": 1532525727148, 
    "Name": "Blacklist Check", 
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1532525727148, 
            "CustomActionId": -1, 
            "DefaultValue": null, 
            "Description": "The threshold of the blacklist to determine whether a domain or IP are blacklisted", 
            "Id": -1, 
            "IsMandatory": true, 
            "ModificationTimeUnixTimeInMs": 1532525727148, 
            "Name": "Blacklist Threshold", 
            "Type": 0, 
            "Value": null
        }
    ], 
    "Script": "from SiemplifyDataModel import EntityTypes\nfrom SiemplifyAction import SiemplifyAction\nfrom MXToolBoxManager import MXToolBoxManager\nfrom SiemplifyUtils import dict_to_flat, construct_csv\n\nMXTOOLBOX_PROVIDER = 'MXToolBox'\nSCRIPT_NAME = 'MXToolBox_DNS_Lookup'\nINSIGHT_MESSAGE = '{0} is found in {1} blacklist.'\n\ndef main():\n    # Configurations.\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    conf = siemplify.get_configuration(MXTOOLBOX_PROVIDER)\n    verify_ssl = True if conf['Verify SSL'] == 'true' else False\n    mx_tool_box_manager = MXToolBoxManager(conf['API Root'], conf['API Key'], verify_ssl)\n\n    # Variables.\n    errors = []\n    success_entities = []\n    result_value = False\n\n    # Parameters.\n    blacklilst_threshold = siemplify.parameters.get('Blacklist Threshold')\n\n    target_entities = [entity for entity in siemplify.target_entities if entity.entity_type == EntityTypes.HOSTNAME or\n                       entity.entity_type == EntityTypes.ADDRESS]\n\n    for entity in target_entities:\n        try:\n            result = mx_tool_box_manager.domain_blacklist_lookup(entity.identifier)\n            if result:\n                if result.get('Failed'):\n                    blacklist_detected_amount = len(result.get('Failed'))\n                    if int(blacklilst_threshold) >= blacklist_detected_amount:\n                        entity.is_suspicious = True\n                        # Update entity before creating insight so it will be marked in red at the insight.\n                        siemplify.update_entities([entity])\n                        siemplify.add_entity_insight(entity, INSIGHT_MESSAGE.format(entity.identifier, blacklist_detected_amount), MXTOOLBOX_PROVIDER)\n                        result_value = True\n                success_entities.append(entity)\n                results_list = result.get('Failed', {}) + result.get('Passed', {})\n                result = map(dict_to_flat, results_list)\n                siemplify.result.add_entity_table(entity.identifier, construct_csv(result))\n        except Exception as err:\n            error_message = 'Error fetching blacklist data for \"{0}\", ERROR: {1}'.format(entity.identifier,\n                                                                                         unicode(err))\n            errors.append(error_message)\n            siemplify.LOGGER.error(error_message)\n            siemplify.LOGGER.exception(err)\n\n    if result_value:\n        output_message = \"Found results for: {0}\".format(\",\".join([entity.identifier for entity in success_entities]))\n    else:\n        output_message = 'Not found data for target entities.'\n\n    if errors:\n        output_message = \"{0}  \\n \\n {1}\".format(output_message, \" \\n \".join(errors))\n\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == '__main__':\n    main()\n", 
    "ScriptResultName": "is_blacklisted", 
    "SimulationDataJson": "{\"Entities\": [\"HOSTNAME\", \"ADDRESS\"]}", 
    "Version": 1.0
}