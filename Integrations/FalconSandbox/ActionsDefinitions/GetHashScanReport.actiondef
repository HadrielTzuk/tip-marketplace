{
    "CreationTimeUnixTimeInMs": 1523172108439, 
    "Creator": "admin", 
    "Description": "Fetch hybrid analysis reports and enrich file hash entities", 
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"EntityResult\": [{\"classification_tags\": [], \"environment_id\": 100, \"total_processes\": 0, \"threat_level\": null, \"size\": 31261, \"job_id\": \"5c4435ef7ca3e109e640b709\", \"target_url\": null, \"interesting\": false, \"error_type\": null, \"state\": \"IN_QUEUE\", \"environment_description\": \"Windows 7 32 bit\", \"mitre_attcks\": [], \"certificates\": [], \"hosts\": [], \"sha256\": \"26d3c8656a83b06b293b15251617fe2c2c493f842a95b3d9b2ee45b3209d5fac\", \"sha512\": \"01f48fa1671cdc9e4d6866b9b237430f1b9b7093cbbed57fb010dc3db84a754a7a0457c5fd968d4e693ca74bdc1c7f15efb55f2af2ea236354944cffc8d4efd8\", \"compromised_hosts\": [], \"extracted_files\": [], \"analysis_start_time\": \"2019-01-20T02:50:01-06:00\", \"tags\": [], \"imphash\": null, \"total_network_connections\": 0, \"av_detect\": null, \"total_signatures\": 0, \"submit_name\": \"Proofpoint_R_Logo (1).png\", \"ssdeep\": null, \"md5\": \"48703c5d4ea8dc2099c37ea871b640ef\", \"error_origin\": null, \"processes\": [], \"sha1\": \"5b30e297b54ef27ffcda06aa212b5aa6c5424e1c\", \"url_analysis\": false, \"type\": \"PNG image data, 1200 x 413, 8-bit/color RGBA, non-interlaced\", \"file_metadata\": null, \"vx_family\": null, \"threat_score\": null, \"verdict\": null, \"domains\": [], \"type_short\": [\"img\"]}], \"Entity\": \"26d3c8656a83b06b293b15251617fe2c2c493f842a95b3d9b2ee45b3209d5fac\"}]", 
            "ResultName": "JsonResult"
        }
    ], 
    "Id": -1, 
    "IntegrationIdentifier": "FalconSandbox", 
    "IsCustom": false, 
    "IsEnabled": true, 
    "ModificationTimeUnixTimeInMs": 1523172108439, 
    "Name": "Get Hash Scan Report", 
    "Parameters": [], 
    "Script": "from SiemplifyDataModel import EntityTypes\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import dict_to_flat, add_prefix_to_dict_keys\nfrom FalconSandboxManager import FalconSandboxManager, ENVIRONMENTS\nimport json\nimport base64\n\nSCRIPT_NAME = \"Falcon Sandbox - EnrichEntities\"\nENRICHMENT_REPORT_KEYS = ['environment_id', 'threat_score', 'threat_level',\n                          'total_processes', 'size', 'job_id', 'vx_family',\n                          'interesting', 'sha256', 'sha512', 'imphash',\n                          'total_network_connections', 'av_detect', 'md5',\n                          'total_signatures', 'sha1', 'type',\n                          'environment_description', 'verdict']\n\n\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    configurations = siemplify.get_configuration('FalconSandbox')\n    key = configurations['Api Key']\n    threshold = float(configurations['Threshold'])\n\n    falcon_manager = FalconSandboxManager(key)\n    siemplify.LOGGER.info(\"Connected to Hybrid Analysis\")\n\n    enriched_entities = []\n\n    for entity in siemplify.target_entities:\n        if entity.entity_type == EntityTypes.FILEHASH:\n            is_enriched = False\n\n            # Fetch report fro each available environment\n            for env_id in ENVIRONMENTS.keys():\n                try:\n                    siemplify.LOGGER.info(\"Fetching reports for environment: {}\".format(ENVIRONMENTS[env_id]))\n\n                    reports = falcon_manager.get_scan_info(entity.identifier,\n                                                           env_id)\n                    max_threat_score = 0\n\n                    siemplify.LOGGER.info(\"Found {} reports.\".format(len(reports)))\n\n                    for index, report in enumerate(reports, 1):\n                        threat_score = report['threat_score']\n                        max_threat_score = max(threat_score, max_threat_score)\n\n                        siemplify.LOGGER.info(\n                            \"Threat Score: {}\".format(threat_score))\n\n                        siemplify.LOGGER.info(\"Attaching JSON report\")\n                        siemplify.result.add_json(\n                            \"{} - {}\".format(entity.identifier, index),\n                            json.dumps(report))\n\n                        siemplify.LOGGER.info(\"Enriching entity {}.\".format(entity.identifier))\n                        enrichment_data = {key: report[key] for key in\n                                           ENRICHMENT_REPORT_KEYS}\n\n                        flat_enrichment_data = dict_to_flat(enrichment_data)\n                        flat_enrichment_data = add_prefix_to_dict_keys(\n                            flat_enrichment_data,\n                            index)\n                        flat_enrichment_data = add_prefix_to_dict_keys(\n                            flat_enrichment_data,\n                            \"Falcon\")\n\n                        entity.additional_properties.update(\n                            flat_enrichment_data)\n\n                        mist_report_name, misp_report = falcon_manager.get_report_by_hash(\n                            entity.identifier, env_id, type='misp')\n                        # Falcon server error with misp json\n                        # misp_json_report_name, misp_json_report = falcon_manager.get_report_by_hash(entity.identifier, env_id, type='misp_json')\n\n                        siemplify.result.add_entity_attachment(\n                            \"{} Report - {}\".format(entity.identifier,\n                                                    ENVIRONMENTS[env_id]),\n                            mist_report_name,\n                            base64.b64encode(misp_report)\n                        )\n\n                        is_enriched = True\n                        # siemplify.result.add_entity_attachment(\n                        #     entity.identifier,\n                        #     \"misp_json_report.json\",\n                        #     base64.b64encode(misp_json_report)\n                        # )\n\n                except Exception:\n                    continue\n\n            if is_enriched:\n                if max_threat_score >= threshold:\n                    entity.is_suspicious = True\n\n                enriched_entities.append(entity)\n\n    if enriched_entities:\n        entities_names = [entity.identifier for entity in enriched_entities]\n\n        output_message = 'Following entities were enriched by Falcon Sandbox\\n' + '\\n'.join(\n            entities_names)\n\n        siemplify.update_entities(enriched_entities)\n\n    else:\n        output_message = 'No entities were enriched.'\n\n    siemplify.end(output_message, 'true')\n\n\nif __name__ == '__main__':\n    main()\n", 
    "ScriptResultName": "max_threat_score", 
    "SimulationDataJson": "{\"Entities\": [\"FILEHASH\"]}", 
    "Version": 1.0
}