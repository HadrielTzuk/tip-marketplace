from SiemplifyUtils import output_handler
from ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED
from SiemplifyAction import SiemplifyAction
from Siemplify import InsightSeverity, InsightType
from TIPCommon import extract_configuration_param, extract_action_param, construct_csv
from TenableIOManager import TenableIOManager
from constants import INTEGRATION_NAME, INTEGRATION_DISPLAY_NAME, GET_VULNERABILITY_DETAILS_SCRIPT_NAME
from UtilsManager import convert_comma_separated_to_list

TABLE_NAME = "Vulnerability Details"


@output_handler
def main():
    siemplify = SiemplifyAction()
    siemplify.script_name = GET_VULNERABILITY_DETAILS_SCRIPT_NAME
    siemplify.LOGGER.info("----------------- Main - Param Init -----------------")

    api_root = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="API Root",
                                           is_mandatory=True, print_value=True)
    secret_key = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Secret Key",
                                             is_mandatory=True)
    access_key = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Access Key",
                                             is_mandatory=True)
    verify_ssl = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Verify SSL",
                                             input_type=bool, is_mandatory=True, print_value=True)

    # Action parameters
    plugin_ids = extract_action_param(siemplify, param_name="Plugin IDs", print_value=True)
    create_insight = extract_action_param(siemplify, param_name="Create Insight", input_type=bool, print_value=True)

    plugin_ids = convert_comma_separated_to_list(plugin_ids)

    siemplify.LOGGER.info("----------------- Main - Started -----------------")

    result = True
    status = EXECUTION_STATE_COMPLETED
    output_message = ""
    json_results = []
    successful_plugins = []
    failed_plugins = []

    try:
        manager = TenableIOManager(api_root=api_root, secret_key=secret_key, access_key=access_key,
                                   verify_ssl=verify_ssl, siemplify_logger=siemplify.LOGGER)

        for plugin_id in plugin_ids:
            try:
                details = manager.get_vulnerability_details(plugin_id)

                if details:
                    successful_plugins.append(details)
                    json_results.append(details.to_json())
                else:
                    failed_plugins.append(plugin_id)
            except Exception as e:
                siemplify.LOGGER.error(f"Failed processing plugin with id: {plugin_id}: Error is: {e}")
                failed_plugins.append(plugin_id)

        if successful_plugins:
            siemplify.result.add_result_json(json_results)
            siemplify.result.add_data_table(TABLE_NAME, construct_csv([detail.to_table() for detail in
                                                                       successful_plugins]))
            output_message += "Successfully retrieved information about the following vulnerabilities in {}: \n{}"\
                .format(INTEGRATION_DISPLAY_NAME, "\n".join([plugin.plugin_id for plugin in successful_plugins]))

            if create_insight:
                siemplify.create_case_insight(triggered_by=INTEGRATION_DISPLAY_NAME,
                                              title=TABLE_NAME,
                                              content="".join([detail.as_insight() for detail in
                                                               sorted(successful_plugins, key=lambda plugin:
                                                               plugin.severity, reverse=True)]),
                                              entity_identifier="",
                                              severity=InsightSeverity.INFO,
                                              insight_type=InsightType.General)

        if failed_plugins:
            output_message += "\nAction wasn't able to retrieve information about the following vulnerabilities in " \
                              "{}: \n{}".format(INTEGRATION_DISPLAY_NAME, "\n".join([id for id in failed_plugins]))

        if not successful_plugins:
            result = False
            output_message = "No information about provided vulnerabilities was found."

    except Exception as e:
        siemplify.LOGGER.error(f"General error performing action {GET_VULNERABILITY_DETAILS_SCRIPT_NAME}")
        siemplify.LOGGER.exception(e)
        result = False
        status = EXECUTION_STATE_FAILED
        output_message = f"Error executing action \"{GET_VULNERABILITY_DETAILS_SCRIPT_NAME}\". Reason: {e}"

    siemplify.LOGGER.info("----------------- Main - Finished -----------------")
    siemplify.LOGGER.info(f"Status: {status}")
    siemplify.LOGGER.info(f"Result: {result}")
    siemplify.LOGGER.info(f"Output Message: {output_message}")

    siemplify.end(output_message, result, status)


if __name__ == "__main__":
    main()
