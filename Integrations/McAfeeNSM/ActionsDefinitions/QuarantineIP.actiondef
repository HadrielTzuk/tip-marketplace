{
    "CreationTimeUnixTimeInMs": 1523548961151, 
    "Creator": "admin", 
    "Description": "Quarantine a particular IP address", 
    "Id": -1, 
    "IntegrationIdentifier": "McAfeeNSM", 
    "IsCustom": false, 
    "IsEnabled": true, 
    "ModificationTimeUnixTimeInMs": 1523548961151, 
    "Name": "Quarantine IP", 
    "Parameters": [], 
    "Script": "from SiemplifyDataModel import EntityTypes\r\n# Imports\r\nfrom SiemplifyAction import SiemplifyAction\r\nfrom NSMManager import NsmManager\r\n\r\n# Consts\r\n# Provider Sign.\r\nACTION_SCRIPT_NAME = 'Quarantine IP'\r\nNSM_PROVIDER = 'McAfeeNSM'\r\n\r\n# Entity type consts.\r\nADDRESS = EntityTypes.ADDRESS\r\n\r\n# Map duration times(Right now action supports only 'until_release').\r\nDURATIONS_MAP = {\r\n    \"15m\": \"FIFTEEN_MINUTES\",\r\n    \"30m\": \"THIRTY_MINUTES\",\r\n    \"45m\": \"FORTYFIVE_MINUTES\",\r\n    \"1h\": \"SIXTY_MINUTES\",\r\n    \"4h\": \"FOUR_HOURS\",\r\n    \"8h\": \"EIGHT_HOURS\",\r\n    \"12h\": \"TWELVE_HOURS\",\r\n    \"16h\": \"SIXTEEN_HOURS\",\r\n    \"until_released\": \"UNTIL_EXPLICITLY_RELEASED\"\r\n}\r\n\r\n\r\ndef main():\r\n    # Configuration\r\n    siemplify = SiemplifyAction()\r\n    siemplify.script_name = ACTION_SCRIPT_NAME\r\n    # Define script name\r\n\r\n    conf = siemplify.get_configuration(NSM_PROVIDER)\r\n    nsm_manager = NsmManager(conf['API Root'], conf['Username'], conf['Password'], conf['Domain ID'],\r\n                             conf['Siemplify Policy Name'], conf['Sensors Names List Comma Separated'])\r\n    # Define Variables\r\n    quarantined_identifiers = []\r\n    result_value = False\r\n\r\n    # Extract duration format for API POST request from DURATIONS_MAP dict.\r\n    duration_format = DURATIONS_MAP[\"until_released\"]\r\n    sensors_names_list_string = conf['Sensors Names List Comma Separated']\r\n\r\n    # Split the string list into list of strings.\r\n    sensors_names_list = sensors_names_list_string.split(',')\r\n\r\n    for entity in siemplify.target_entities:\r\n        if entity.entity_type == ADDRESS:\r\n            # Quarantine address in each sensor.\r\n            for sensor_name in sensors_names_list:\r\n                # Extract sensor id from SENSORS_NAMES_TO_IDS dict -> Sensors are inserted dynamicaly by the user and cannot be stored in a Const.\r\n                try:\r\n                    sensor_id = nsm_manager.get_sensor_id_by_name(sensor_name)\r\n                    res = nsm_manager.quarantine_ip(sensor_id, entity.identifier, duration_format)\r\n                    # Verify that the address blocked at least in one sensor.s\r\n                    if res and entity.identifier not in quarantined_identifiers:\r\n                        # If address was quarantined append it's identifier to 'quarantined_identifiers' list.\r\n                        quarantined_identifiers.append(entity.identifier)\r\n                except Exception as err\r\n                    siemplify.LOGGER.error('Error quarantine IP {0} for sensor \"{1}\", ERROR: {2}'.format(\r\n                        entity.identifier,\r\n                        sensor_name,\r\n                        err.message\r\n                    ))\r\n                    siemplify.LOGGER._log.exception(err)\r\n\r\n\r\n    # End session with NSM.\r\n    nsm_manager.logout()\r\n\r\n    # Organize output message.\r\n    if quarantined_identifiers:\r\n        output_message = \"Successfully quarantined {0}\".format(\",\".join(quarantined_identifiers))\r\n        result_value = True\r\n    else:\r\n        output_message = 'No address was quarantined.'\r\n\r\n    siemplify.end(output_message, result_value)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n", 
    "ScriptResultName": "is_success", 
    "SimulationDataJson": "{\"Entities\": [\"ADDRESS\"]}", 
    "Version": 1.0
}