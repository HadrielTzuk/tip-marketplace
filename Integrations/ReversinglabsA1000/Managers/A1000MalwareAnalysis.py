# ==============================================================================
# title           :A1000MalwareAnalysis.py
# description     :The A1000 Malware Analysis Appliance is a powerful, integrated, plug-and-play solution for individual
#                  analysts or small teams of analysts that makes threat detection, deep analysis and collaboration more
#                  effective and productive. This solution is offered as an on-premises hardware appliance, a
#                  VM appliance, or as a cloud-based service.
# author          :vlads@siemplify.co
# date            :01-21-18
# python_version  :2.7
# libraries       :
# requirements    :access to WAN
# product_version :1.0.0
# ==============================================================================


# =====================================
#              IMPORTS                #
# =====================================

import json
import requests

# =====================================
#             CONSTANTS               #
# =====================================
Example_Of_Getting_Summary_Analysis_Report = {
    "count": 2,
    "next": 'null',
    "previous": 'null',
    "results": [
        {
            "classification_origin": 'null',
            "classification_reason": "unknown",
            "local_first_seen": "2016-05-19T16:39:40.950094Z",
            "local_last_seen": "2016-05-19T16:39:40.950094Z",
            "sha1": "4b21a49eadac1bc01477eff778041fdb765b8139",
            "threat_level": 0,
            "threat_name": 'null',
            "threat_status": "unknown",
            "trust_factor": 5
        },
        {
            "classification_origin": 'null',
            "classification_reason": "cloud",
            "local_first_seen": "2016-05-20T08:13:31.656799Z",
            "local_last_seen": "2016-05-20T08:13:31.656799Z",
            "sha1": "9dc5e23c7ab2692b83f0690a736b123a1837ae56",
            "threat_level": 5,
            "threat_name": "Win32.Trojan.Zbot",
            "threat_status": "malicious",
            "trust_factor": 5
        }
    ]
}

FIELDS = ["md5",
          "threat_status",
          "threat_level",
          "threat_name",
          "trust_factor",
          "classification_origin",
          "classification_reason",
          "local_first_seen",
          "local_last_seen",
          "aliases"]
          # "ticore",
          # "ticloud",
          # "summary"]

HASH_FOR_TEST = ["526e57077b938b3c3dbce56f8aaaa7be"]


# =====================================
#              CLASSES                #
# =====================================


class A1000MalwareAnalysisException(Exception):
    """
    General Exception for A1000MalwareAnalysis
    """
    pass


class A1000MalwareAnalysisClient(object):
    """
    A1000MalwareAnalysis CLI functions
    """
    def __init__(self, host, username, password):
        self.host = host
        token = self.get_token(username, password)
        self.headers_json = {'Authorization': 'Token ' + token, "Content-type": "application/json"}
        self.upload_file_header = {'Authorization': 'Token ' + token}

    def test_connectivity(self):
        """
        Validates connectivity using a constant hash.
        :return: {boolean} True/False
        """
        r = self.processing_status(HASH_FOR_TEST)
        if r:
            return True
        raise A1000MalwareAnalysisException("Conection Error: {}, status code: {}".format(r.cotent, r.status_code))

    def get_report(self, hash_values):
        """
         Get a summary classification report for a list of sample(s)
        :param hash_values: {list} hash
        :return: {List of dictionaries} hash details
        """
        if not hash_values:
            return None
        data = {"hash_values": hash_values, "fields": FIELDS}
        res = self.post_data('api/samples/list/', data)
        return res

    def upload_file(self, sample_file):
        """
         Upload a file for analysis.
        :param sample_file: {string} file path
        :return: {dict} file details
        """
        response = requests.post('{0}/api/uploads/'.format(self.host),
                                 files={'file': open(sample_file, 'rb')},
                                 headers=self.upload_file_header)

        response.raise_for_status()
        data_json = response.json()
        return data_json["detail"]

    def processing_status(self, hash_values):
        """
         Returns the processing status in the A1000 system for the list of hash values
        :param hash_values: {list} hash
        :return: processing status
        """
        data = {"hash_values": hash_values}
        return self.post_data('api/samples/status/', data)

    def post_data(self, path, data):
        """
        :param path: {string}
        :param data: {dict}
        :return: {list of dicts} hash value and status
        """
        params = json.dumps(data)
        response = requests.post('{0}/{1}'.format(self.host, path), data=params, headers=self.headers_json)
        response.raise_for_status()

        data_json = response.json()
        return data_json["results"]

    def delete_sample(self, sample_hash):
        """
        Delete sample for given hash value.
        :param sample_hash: {list} hash(es)
        :return: {dict} hash details and deletion status
        """
        request_url = '{0}/api/samples/{1}/'.format(self.host, sample_hash)
        response = requests.delete(request_url, headers=self.headers_json)
        response.raise_for_status()

        data_json = response.json()
        return data_json["results"]

    def get_token(self, username, password):
        """
        Create authorization token
        :param username: {string}
        :param password: {string}
        :return: {string}
        """
        params = {'username': username, 'password': password}
        headers = {"Content-type": "application/x-www-form-urlencoded"}
        response = requests.post('{0}/api-token-auth/'.format(self.host), data=params, headers=headers)
        response.raise_for_status()

        data_json = response.json()
        return data_json["token"]


