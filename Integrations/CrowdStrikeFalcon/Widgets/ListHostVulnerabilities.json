{
  "type": 3,
  "actionIdentifier": "List Host Vulnerabilities",
  "title": "CrowdStrikeFalcon - List Host Vulnerabilities",
  "description": "This widget returns information about the list host vulnerabilities that were enriched by Crowd Strike Falcon.",
  "dataDefinition":
  {
    "htmlContent": "<!DOCTYPE html><html><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i\" rel=\"stylesheet\"><link href='https://www.siemplify.co/wp-content/cache/min/1/wp-content/themes/siemplify/assets/fonts/fonts.min.css?ver=1628709624' rel='stylesheet'><style> * { box-sizing: border-box; } body { padding: 0; margin: 0; background-color: #212C45; } ::-webkit-scrollbar { width: 0; } .container { width: 100%; float: left; min-height: 100vh; } .container-list { float: left; width: 30%; min-height: 275px; height: 100%; overflow-y: auto; } .container-content { float: left; width: 68%; padding-left: 3%; border-left: 1px solid #576B95; } .title-logo { display: flex; width: 100%; justify-content: space-between; } .vulnerabilities-count { display: flex; align-items: center; justify-content: center; margin-bottom: 24px; border-top: 1px solid #576B95; padding-top: 18px; flex-wrap: wrap; } .vulnerabilities-count h2 { font-weight: bold; font-size: 72px; text-shadow: 1px 1px #fff; margin: 0; } .vulnerabilities-count h3 { font-weight: bold; font-size: 22px; margin: 0; padding-left: 3%; width: 200px; } .vulnerability-severities { display: flex; justify-content: center; align-items: center; width: 100%; margin-bottom: 28px; flex-wrap: wrap; } .vulnerability-severities p { font-size: 14px; font-weight: bold; } .vulnerability-severities > div { display: flex; margin-right: 6%; min-width: 65px; align-items: center; } .vulnerability-severities .severity-color { margin-right: 10px; width: 32px; height: 32px; border-radius: 50%; display: flex; justify-content: center; align-items: center; } .severity-critical-color { background-color: #FF5A50; } .severity-high-color { background-color: #FA903E; } .severity-medium-color { background-color: #FFED2E; } .severity-low-color { background-color: #42C3D0; } .severity-unspecified-color { background-color: #669DF6; } .vulnerabilities-table table { border-collapse: collapse; width: 100%; } vulnerabilities-table-head { font-weight: bold; font-size: 24px; margin-bottom: 20px; } .vulnerabilities-table table tr td { padding: 10px; vertical-align: top; } .vulnerabilities-table table tr td a { color: #669DF6; text-decoration: underline; } .vulnerabilities-table table tr th { text-align: left; border-bottom: 1px solid #576B95; border-top: 1px solid #576B95; padding: 8px; font-weight: bold; width: 15%; } .vulnerabilities-table table tr td { line-height: 16px; text-align: left; border-bottom: 1px solid #576B95; padding: 10px; word-break: break-word; color: #C3D2E8; } .description-view-more { cursor: pointer; } span.container-list-item { width: 100%; float: left; color: #C3D2E8; height: 38px; cursor: pointer; overflow: hidden; text-overflow: ellipsis; padding: 10px; } span.container-list-item.active { background: #3A4A6C; font-weight: bold; } .circle-number { color: #161626; } .full-description { display: none; } .nothing-found { width: 100%; float: left; padding: 20px 0; text-align: center; color: #fff; display: none; } .description { width: 10vw; cursor: pointer; } .description-hidden { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }</style><body style=\"margin:0 auto; font-family: Open Sans, serif;font-size: 12px; color: #fff\"><p id=\"nothingFound\" class=\"nothing-found\">Nothing found.</p><div id=\"container\" class=\"container\"> <div class=\"container-list\" style=\"padding: 0 6px\" id=\"list\"> </div> <div id=\"content\" class=\"container-content\"> </div></div> <script> window.addEventListener('load', init, false); const vulnerabilitiesData = [{stepInstanceName}.JsonResult]; const listElement = document.getElementById('list'); const contentElement = document.getElementById('content'); const containerElement = document.getElementById('container'); const noDataElement = document.getElementById('nothingFound'); let activeItem; const dataExists = !isEmptyArray(vulnerabilitiesData); function init() { if (dataExists) { setVulnerabilitiesData(); } else { setNothingFound(); } } function setVulnerabilitiesData() { setListElements(); addListenerToListElement(); setFirstItemData(); } function calculateHeight() { const innerHeight = window.innerHeight; const contentElementHeight = contentElement.getBoundingClientRect().height; listElement.style.maxHeight = contentElementHeight > innerHeight ? `${contentElementHeight}px` : `${innerHeight}px`; } function setNothingFound() { noDataElement.style.display = 'block'; containerElement.style.display = 'none'; } function setFirstItemData() { setContent(vulnerabilitiesData[0].Entity); setActiveItem(listElement.children[0]); } function setListElements() { let listHtml = ''; vulnerabilitiesData.forEach((item, index) => { listHtml += getListItemHtml(item.Entity, index, item.Entity); }); listElement.innerHTML = listHtml; } function addListenerToListElement() { listElement.addEventListener('click', onListClick); } function getListItemHtml(displayName, index, identifier) { return `<span class=\"container-list-item\" data-id=\"${identifier}\">${displayName}</span>`; } function onListClick(event) { const targetElement = event.target; if (targetElement.dataset.hasOwnProperty('id')) { activeItem.classList.remove('active'); const identifier = event.target.dataset.id; targetElement.classList.add('active'); setActiveItem(targetElement); setContent(identifier); } } function setActiveItem(item) { activeItem = item; activeItem.classList.add('active'); } function setContent(identifier) { const activeItem = vulnerabilitiesData.find(item => item.Entity === identifier); contentElement.innerHTML = getContentHtml(activeItem); addDescriptionListeners(); calculateHeight(); } function getContentHtml(dataItem) { return getVulnerabilitiesCountHtml(dataItem?.EntityResult?.details?.length, dataItem) + getVulnerabilitySeveritiesHtml(dataItem?.EntityResult?.statistics?.severity) + getVulnerabilityTableHtml(dataItem?.EntityResult?.details); } function getVulnerabilitiesCountHtml(count, item) { return `<div class=\"title-logo\"> <h3>${item.Entity}</h3> <svg width=\"48\" height=\"38\" viewBox=\"0 0 25 25\" fill=\"currentColor\"> <g> <g> <path d=\"M16.7,16.2c-2.1,0.2-3.4-0.9-4.4-1.5c1.7,1.5,3,2.9,3.6,3.6c-0.5-0.1-1-0.4-1.4-0.7c0.6,0.8,1.4,1.6,2.3,2c0,0-0.4,0-0.8-0.1c1,0.8,1.6,0.5,2,0.3c0.5,1.4,1.3,1.3,1.6,1.3c-1.1-0.4-0.8-1.3,0.2-1.5c1-0.1,1.1,0.6,1.1,1c0.5-1.3,0.1-1.3-1-1.4c-1-0.1-1.3-0.5-1.5-0.8c0.5,0.1,1,0,2.1-0.5c1.1-0.6,2-0.4,2.5-0.4C20.2,15.5,18.8,16,16.7,16.2z M10.2,14.8c-1.6,0.1-3.2-1-4-1.6c1.1,1.4,2.8,2.3,4.5,2.7c1.7,0.4,2,0.5,3.3,1.1c-2.5-2.5-4.4-3-5-3.2C9.5,14.1,9.9,14.4,10.2,14.8z M6.4,8.6c1.4,1,3.3,1.6,4.7,3.5c-0.3-1-0.9-2.2-3.8-4.1C5.8,7.1,3.7,6,1,3C1.2,3.8,2.1,5.9,6.4,8.6z M11.2,13.5c-0.4-0.8-1.1-1.9-3.9-3.4C6.1,9.4,3.8,8.3,1.9,6.2C2,7,3,8.7,6.9,10.7C8,11.3,9.9,11.9,11.2,13.5z M23.1,16.2c0.1-1-2.2-1.4-3-1.7c-0.2-0.1-0.6-0.2-0.2-1c0.5-1.2,1-2.3-5.8-4.2C8.5,7.7,6.3,5.8,4.6,3.7c0.8,2.4,2.6,3.2,4.6,4.8c2,1.6,2.1,2.5,2.6,3.4c1.3,2.1,1.5,2.4,2.8,3.4c1.5,1,3.3,0.3,5.3,0.6c2,0.3,3.6,1.8,4,2.4C24.3,17.6,23.3,16.5,23.1,16.2z M21.8,15.7c1,0.2,1,0.4,1,0.8C22.4,16,21.8,15.7,21.8,15.7z\"> </path> </g> </g> </svg> </div> <div class=\"vulnerabilities-count\"> <h2>${count || 0}</h2> <h3>VULNERABILITIES FOUND</h3> </div>`; } function getVulnerabilitySeveritiesHtml(severities) { return `<div class=\"vulnerability-severities\"> <div class=\"severity-critical\"> <div class=\"severity-color severity-critical-color\"><p class=\"circle-number\">${severities.critical}</p></div> <div> <p>Critical</p> </div> </div> <div class=\"severity-high\"> <div class=\"severity-color severity-high-color\"><p class=\"circle-number\">${severities.high}</p></div> <div> <p>High</p> </div> </div> <div class=\"severity-medium\"> <div class=\"severity-color severity-medium-color\"><p class=\"circle-number\">${severities.medium}</p></div> <div> <p>Medium</p> </div> </div> <div class=\"severity-low\"> <div class=\"severity-color severity-low-color\"><p class=\"circle-number\">${severities.low}</p></div> <div> <p>Low</p> </div> </div> <div class=\"severity-unspecified\"> <div class=\"severity-color severity-unspecified-color\"><p class=\"circle-number\">${severities.unknown}</p></div> <div> <p>Unspecified</p> </div> </div> </div>` } function getVulnerabilityTableHtml(tableData) { if (!isEmptyArray(tableData)) { let tableRows = ''; tableData.slice(0, 10).forEach((item, index) => { tableRows += getVulnerabilityTableRowHtml(item, index) }); return `<div id=\"vulnerabilitiesTable\" class=\"vulnerabilities-table\"> </br> <table> <thead> <tr> <th>Severity</th> <th>CVE</th> <th>Exploit Status</th> <th>Description</th> <th>Remediation</th> <th>Event Time</th> </tr> </thead> <tbody> ${tableRows} </tbody> </table> </div>` } return ''; } function getExploitStatus(status) { if (status === 30) { return 'Available' } if (status === 60) { return 'Easily Accessible' } if (status === 90) { return 'Actively Used' } return 'Unproven' } function addDescriptionListeners() { const descriptionViewMoreElements = document.getElementsByClassName('description'); Array.from(descriptionViewMoreElements).forEach(elem => { elem.addEventListener('click', showFullDescription) }) } function showFullDescription(event) { const classList = event.target.classList; const nextSibling = event.target.nextElementSibling; const nextSiblingClassList = event.target.nextElementSibling?.classList; if (nextSibling) { if (nextSiblingClassList.contains('description-hidden')) { nextSiblingClassList.remove('description-hidden') } else { nextSiblingClassList.add('description-hidden') } } else { if (classList.contains('description-hidden')) { classList.remove('description-hidden') } else { classList.add('description-hidden') } } } function createDescriptionCeil(text) { const firstPart = text.slice(0, 92); const secondPart = text.slice(92); return `<div class=\"description\">${firstPart}</div> <div class=\"description description-hidden\">${secondPart}</div>` } function getVulnerabilityTableRowHtml(rowData) { return `<tr> <td>${rowData?.cve?.severity === 'SEVERITY_UNSPECIFIED' ? 'UNSPECIFIED' : rowData.cve.severity.toUpperCase()}</td> <td><a target=\"_blank\" href=\"${rowData.cve.references ? rowData?.cve?.references[0] : ''}\">${rowData?.cve?.id}</a></td> <td>${getExploitStatus(rowData?.cve?.exploit_status)}</td> <td>${createDescriptionCeil(rowData?.cve?.description)}</td> <td>${rowData?.remediation[0]?.action}</td> <td>${rowData?.created_timestamp}</td> </tr>` } function isEmptyArray(arr) { return !arr || !arr.length || arr.length === 0; } </script> </body></html>",
    "htmlHeight": 400,
    "safeRendering": false,
    "type": 3,
    "widgetDefinitionScope": 2
  },
  "conditionsGroup": {
    "conditions": [
      {
        "value": "true",
        "fieldName": "[{stepInstanceName}.is_success]",
        "matchType": 0
      }
    ],
    "logicalOperator": 0
  },
  "defaultSize": 1
}