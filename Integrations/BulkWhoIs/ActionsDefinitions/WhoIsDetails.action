{
    "CreationTimeUnixTimeInMs": 0, 
    "Creator": "admin", 
    "Description": "Get domain/IP Whois info", 
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"EntityResult\": {\"RegistrarWHOISServer\": \"\", \"UpdatedDate\": \"2018-05-22T09\", \"Reseller\": \"\", \"DNSSEC\": \"unsigned\", \"DomainName\": \"GOOGLE.CO.IN\", \"RegistrarIANAID\": \"292\", \"RegistrantCountry\": \"US\", \"RegistrarAbuseContactEmail\": \"\", \"RegistryDomainID\": \"D8357-AFIN\", \"DomainStatus\": \"clientUpdateProhibited\", \"RegistrarAbuseContactPhone\": \"\", \"RegistryExpiryDate\": \"2019-06-23T14\", \"Registrar\": \"MarkMonitorInc.\", \"RegistrantOrganization\": \"GoogleInc.\", \"NameServer\": \"NS4.GOOGLE.COM\", \"CreationDate\": \"2003-06-23T14\", \"RegistrarURL\": \"http\", \"RegistrantState/Province\": \"CA\", \"RegistrarRegistrationExpirationDate\": \"\", \">>>LastupdateofWHOISdatabase\": \"2019-01-15T06\"}, \"Entity\": \"GOOGLE.CO.IN\"}]", 
            "ResultName": "JsonResult"
        }
    ], 
    "Id": -1, 
    "IntegrationIdentifier": "BulkWhoIs", 
    "IsCustom": false, 
    "IsEnabled": true, 
    "ModificationTimeUnixTimeInMs": 0, 
    "Name": "WhoIs Details", 
    "Parameters": [], 
    "Script": "from SiemplifyAction import *\nfrom urlparse import urlparse\nimport datetime,requests,sys\nimport hashlib,hmac\nimport json\n\n\nAPI_URL = 'http://api.bulk-whois-api.com/api/query'\nURL = 'URL'\nHOSTNAME = 'HOSTNAME'\nADDRESS = 'ADDRESS'\n\nclass Whois(object):\n\tdef __init__(self, **kwargs):\n\t\tself.__siemplify = kwargs.pop('siemplify',None)\n\t\tself.__Api_Key = self.__siemplify.get_configuration(\"BulkWhoIs\")[\"ApiKey\"]\n\t\tself._Secret_Key = self.__siemplify.get_configuration(\"BulkWhoIs\")[\"SecretKey\"]\n\t\tself._api_url = API_URL\n\t\treturn super(Whois, self).__init__(**kwargs)\n\tdef get_domain_from_url(self, url):\n\t\tparsed_uri = urlparse(url)\n\t\tdomain_name  =  '{uri.netloc}'.format(uri=parsed_uri)\n\t\treturn domain_name\n\tdef scan(self):\n\t\toutput_message = ''\n\t\tentities_to_update = []    \n\t\tfor entity in self.__siemplify.target_entities:   \n\t\t\t\tif (entity.entity_type == HOSTNAME and not(entity.is_internal)) or  entity.entity_type == URL or entity.entity_type == ADDRESS:\n\t\t\t\t\tentities_to_update.append(entity)\n\t\tif not(len(entities_to_update) == 0):\n\t\t\t#Get Time.    \n\t\t\tstr_time = datetime.datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:%S\")\n\t\t\t#Get Results And Update Entities.\n\t\t\tadditional_data ={}\n\t\t\tfor entity in entities_to_update:\n\t\t\t\tif entity.entity_type == URL:\n\t\t\t\t\tpost_data = \"query=\" + self.get_domain_from_url(entity.identifier)\n\t\t\t\telse:\n\t\t\t\t\tpost_data = \"query=\" + entity.identifier\n\t\t\t\tdata_to_sign = self.__Api_Key + str_time + post_data\n\t\t\t\tsignature = hmac.new(bytearray(self._Secret_Key,'utf8'),bytearray(data_to_sign,'utf8'),digestmod=hashlib.sha512).hexdigest().lower()\n\t\t\t\theaders = {\n\t\t\t\t\t\"Key\": self.__Api_Key, \n\t\t\t\t\t\"Time\":str_time, \n\t\t\t\t\t\"Sign\":signature, \n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t\t}\n\t\t\t\tresponse = requests.post(self._api_url,headers=headers,data = post_data)\n\t\t\t\tjsRes = json.loads(response.text)\n\t\t\t\tif jsRes[\"success\"] == 1:\n\t\t\t\t\tprint 'success'\n\t\t\t\t\tadditional_data.update({entity.identifier:{}})\n\t\t\t\t\tentity.is_enriched = True\n\t\t\t\t\tif len(output_message) > 0:\n\t\t\t\t\t\toutput_message = output_message  +  ', ' + entity.identifier\n\t\t\t\t\telse:\n\t\t\t\t\t\toutput_message += entity.identifier\n\t\t\t\t\tif 'rawOutput' in jsRes:\n\t\t\t\t\t\tprint \"Entered if registrant_contact\"\n\t\t\t\t\t\tdata = jsRes['rawOutput'][0]\t\n\t\t\t\t\t\tsplited_data = data.split('\\n')\t\n\t\t\t\t\t\tfor val in splited_data: \n\t\t\t\t\t\t\tsplited_val = val.split(':')\t\t\t\n\t\t\t\t\t\t\tif len(splited_val) > 1:\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tadditional_data[entity.identifier][splited_val[0].lstrip().replace('>','')] = splited_val[1].lstrip()\n\t\t\t\t\t\t\t\tentity.additional_properties['WhoisQuery.' + splited_val[0].lstrip()] = splited_val[1].lstrip()\n\t\t\t\t\t\t\t\tif splited_val[0] == 'Admin Country' or splited_val[0] == 'Country'or splited_val[0] == 'Registar Country':\n\t\t\t\t\t\t\t\t\tentity.additional_properties[\"Country\"] = splited_val[1]\n\t\t\t\t\t\t\t\tif splited_val[0] == 'Admin City'  or splited_val[0] == 'City' or splited_val[0] == 'Registar City':\n\t\t\t\t\t\t\t\t\tentity.additional_properties[\"City\"] = splited_val[1]\n\t\t\t\t\tif \"output\" in jsRes:\n\t\t\t\t\t\tif 'registrant_contact' in jsRes['output']:\n\t\t\t\t\t\t\tif 'country' in jsRes[\"output\"][\"registrant_contact\"]:\n\t\t\t\t\t\t\t\tentity.additional_properties[\"Country\"] = jsRes[\"output\"][\"registrant_contact\"][\"country\"]\n\t\t\t\t\t\t\t\tadditional_data[entity.identifier]['country'] = jsRes[\"output\"][\"registrant_contact\"][\"country\"]\n\t\t\t\t\t\t\tif 'country_code' in jsRes[\"output\"][\"registrant_contact\"]:\n\t\t\t\t\t\t\t\tentity.additional_properties[\"Country\"] = jsRes[\"output\"][\"registrant_contact\"][\"country_code\"]\n\t\t\t\t\t\t\t\tadditional_data[entity.identifier]['country'] = jsRes[\"output\"][\"registrant_contact\"][\"country_code\"]\n\t\t\t\t\t\t\tif 'city' in jsRes[\"output\"][\"registrant_contact\"]:\n\t\t\t\t\t\t\t\tentity.additional_properties[\"city\"] = jsRes[\"output\"][\"registrant_contact\"][\"city\"]\n\t\t\t\t\t\t\t\tadditional_data[entity.identifier]['city'] = jsRes[\"output\"][\"registrant_contact\"][\"city\"]\n\t\t\t\t\t\t\tfor key,value in jsRes[\"output\"][\"registrant_contact\"].items():\n\t\t\t\t\t\t\t\tadditional_data[entity.identifier][key]= value.lstrip()\n\t\t\t\t\t\t\t\tpropertyName = \"WhoisQuery.\" + key\n\t\t\t\t\t\t\t\tentity.additional_properties[propertyName] = value.lstrip()\n\t\t\t\t\t\t\t\t\n\t\tif len(additional_data) > 0:\n\t\t\t\tfor entity in additional_data.keys():\n\t\t\t\t\tfor key in additional_data[entity].keys():\n\t\t\t\t\t\tif key in ['NOTICE','For more information on Whois status codes, please visit https','URL of the ICANN Whois Inaccuracy Complaint Form','to','by the following terms of use','% for more information on IANA, visit http']:\n\t\t\t\t\t\t\tadditional_data[entity].pop(key,None)\n\t\t\t\t\tdataTable = []\n\t\t\t\t\tdataTable.append('Key,Value')\n\t\t\t\t\tfor propKey in additional_data[entity]:\n\t\t\t\t\t\tdataTable.append(propKey + ',' + additional_data[entity][propKey])\n\t\t\t\t\tself.__siemplify.result.add_entity_table(entity,  dataTable)#additional_data[entity])\n\t\t\t\toutput_message += ' enriched.'\n\t\telse:\n\t\t\toutput_message = 'No entites were enriched.'  \n\t\tself.__siemplify.update_entities(entities_to_update)\n\t\tself.__siemplify.end(output_message, 'true')\n\n\ndef main():\n\tsiemplify = SiemplifyAction()\n\twhois = Whois(siemplify = siemplify)\n\twhois.scan()\n\nif __name__ == '__main__':\n\tmain()\n", 
    "ScriptResultName": "is_enriched", 
    "SimulationDataJson": "{\"Entities\": [\"HOSTNAME\", \"DestinationURL\", \"ADDRESS\"]}", 
    "Type": 0, 
    "Version": 1.0
}