{
    "CreationTimeUnixTimeInMs": 1525339879061,
    "Creator": "admin",
    "Description": "Sync closure of the tickets at the CA Desk Manager with Siemplify cases closure.",
    "Id": -1,
    "Integration": "CaServiceDesk",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1525339879061,
    "Name": "CA Close Ticket In CA For Closed Case",
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "http://x.x.x.x:<port>",
            "Id": -1,
            "IsMandatory": true,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "API Root",
            "Type": 2
        },
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "",
            "Id": -1,
            "IsMandatory": true,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "Username",
            "Type": 2
        },
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "",
            "Id": -1,
            "IsMandatory": true,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "Password",
            "Type": 2
        },
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "Test",
            "Id": -1,
            "IsMandatory": false,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "Group Filter",
            "Type": 2
        },
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "group.combo_name",
            "Id": -1,
            "IsMandatory": true,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "Group Field",
            "Type": 2
        },
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "Closed",
            "Id": -1,
            "IsMandatory": true,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "Ticket Final Status",
            "Type": 2
        },
        {
            "CreationTimeUnixTimeInMs": 1525339879061,
            "DefaultValue": "TEST CLOSE",
            "Id": -1,
            "IsMandatory": true,
            "JobDefinitionId": -1,
            "ModificationTimeUnixTimeInMs": 1525339879061,
            "Name": "Script Name",
            "Type": 2
        }
    ],
    "RunIntervalInSeconds": 900,
    "Script": "# -*- coding: utf-8 -*-\n# ==============================================================================\n# title           :CaSoapManager.py\n# description     :This Module contain all CA Desk operations functionality using Soap API\n# author          :zdemoniac@gmail.com\n# date            :1-9-18\n# python_version  :2.7\n# libraries       :time, xml, zeep\n# requirements    :pip install zeep, ticketFields names in CA\n# product_version :\n# ==============================================================================\n\n# =====================================\n#              IMPORTS                #'\n# =====================================\nfrom CaSoapManager import CaSoapManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import convert_datetime_to_unix_time\nimport urllib3\nimport requests\nimport datetime\nfrom pytz import timezone\nimport os\n\n# =====================================\n#             CONSTANTS               #\n# =====================================\n# Configurations.\nDEFAULT_DAYS_BACKWARDS = 0\nDATE_TIME_STR_FORMAT = \"%d-%m-%Y %H:%M:%S\"\n\n# Consts.\nCA_ALERTS_RULE = 'CA Desk Manager Ticket.'\nUTC_TIMEZONE_STRING = 'UTC'\nDEFAULT_CLOSURE_COMMENT = \"Closed at Siemplify.\"\n\n\n# =====================================\n#              CLASSES                #\n# =====================================\ndef main():\n    try:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n        requests.packages.urllib3.disable_warnings()\n\n        # Define SiemplifyJob object.\n        siemplify = SiemplifyJob()\n\n        # Obtain Script Name.\n        siemplify.script_name = siemplify.parameters['Script Name']\n\n        siemplify.LOGGER.info('--------------- JOB ITERATION STARTED ---------------')\n\n        # Parameters\n        # Credentials\n        api_root = siemplify.parameters['API Root']  # Default: 'http://xxxxx:8080'\n        username = siemplify.parameters['Username']\n        password = siemplify.parameters['Password']\n\n        group_filter_str = siemplify.parameters['Group Filter']\n        group_field = siemplify.parameters.get('Group Field', 'group.combo_name')\n        ticket_final_status = siemplify.parameters['Ticket Final Status']\n\n        # Convert str lists to list.\n        group_filter = group_filter_str.split(',') if group_filter_str else []\n\n        # Define Ca Desk Manager object.\n        ca_manager = CaSoapManager(api_root, username, password)\n\n        # Get last Successful execution time.\n        last_success_time_unixtime = siemplify.fetch_timestamp(datetime_format=False)\n        siemplify.LOGGER.info('Got last successful run: {0}'.format(str(last_success_time_unixtime)))\n\n        siemplify.LOGGER.info('Converted last run time to unixtime:{0}'.format(last_success_time_unixtime))\n        # Get alerts that were dismissed or the cases they are contained in closed since last success run.\n        ticket_ids_to_close = []  # Ticket ids of the dismissed alerts since last success time.\n\n        # Get alert ticket ids from closed cases.\n        siemplify.LOGGER.info('Get alert IDs from closed cases.')\n        ticket_ids_to_close.extend(siemplify.get_alerts_ticket_ids_from_cases_closed_since_timestamp(\n            last_success_time_unixtime, CA_ALERTS_RULE))\n        siemplify.LOGGER.info('Got {0} alert IDs from closed cases.'.format(len(ticket_ids_to_close)))\n\n        siemplify.LOGGER.info('Get dismissed alerts since time stamp.')\n        # Get dismissed alerts since time.\n        ticket_ids_to_close.extend(siemplify.get_ticket_ids_for_alerts_dismissed_since_timestamp(\n            last_success_time_unixtime))\n        siemplify.LOGGER.info('Got {0} alert ids from closed cases and dismissed alerts.'.format(len(\n            ticket_ids_to_close)))\n\n        siemplify.LOGGER.info('Unify alert IDs list.')\n        # Unify alert ids list.\n        ticket_ids_to_close = list(set(ticket_ids_to_close))\n\n        siemplify.LOGGER.info('Found {0} closed alert with ids:{1} since:{2}'.format(str(len(ticket_ids_to_close)),\n                                                                                     str(ticket_ids_to_close),\n                                                                                     str(last_success_time_unixtime)))\n\n        siemplify.LOGGER.info('Run on alerts ticket ids')\n        # Run on tickets ids list and close the ticket at the Ca Desk Manager.\n        for ticket_id in ticket_ids_to_close:\n            siemplify.LOGGER.info('Get related cases for alert with ticket id: {0}'.format(ticket_id))\n            # Verify alert's case is not a test case.\n            related_cases = siemplify.get_cases_by_ticket_id(ticket_id)\n            siemplify.LOGGER.info('Got related cases for alert with ticket id {0}: {1}'.format(ticket_id,\n                                                                                               str(related_cases)))\n            siemplify.LOGGER.info('Run on related cases for alert with ticket id {0}'.format(ticket_id))\n            for case_id in related_cases:\n                siemplify.LOGGER.info('Run on case id: {0}'.format(ticket_id))\n                # Get alert's case content.\n                siemplify.LOGGER.info('')\n                case_content = siemplify._get_case_by_id(str(case_id))\n                # Get the alert content from the case.\n                alerts = case_content['cyber_alerts']\n                for alert in alerts:\n                    if ticket_id == alert['additional_properties']['TicketId']:\n                        if alert['additional_properties']['IsTestCase'] == 'False':\n                            # Close incident.\n                            try:\n                                # Get Description from case closure reason.\n                                description = ''\n                                case_closure_reason_data = siemplify.get_case_closure_details([str(case_id)])\n\n                                # Get incident group.\n                                incident_group = ca_manager.get_incident_by_id(ticket_id, [group_field])\n                                # verify group filter.\n                                if group_filter and (incident_group[group_field]) in group_filter:\n                                    ca_manager.change_ticket_status(ticket_id, ticket_final_status)\n                                    if case_closure_reason_data:\n                                        closure_data_list = [\"{0}:{1}\".format(key, unicode(val).encode('utf-8')) for\n                                                             key, val in\n                                                             case_closure_reason_data[0].iteritems()]\n                                        description = \", \".join(closure_data_list)\n                                        ca_manager.add_comment_to_incident(ref_num=ticket_id, comment=description)\n\n                                    else:\n                                        ca_manager.add_comment_to_incident(ref_num=ticket_id,\n                                                                           comment=DEFAULT_CLOSURE_COMMENT)\n\n                                    siemplify.LOGGER.info('Ticket with id:{0} closed.'.format(ticket_id))\n                                else:\n                                    siemplify.LOGGER.info('Ticket \"{0}\" did not matched to group.For group {1}'.format(ticket_id, group_filter))\n                            except Exception as e:\n                                siemplify.LOGGER.error('An error closing ticket: {0}'.format(e.message))\n                                siemplify.LOGGER._log.exception(e)\n\n        # Update last successful run time.\n        siemplify.save_timestamp(datetime_format=True)\n        siemplify.LOGGER.info('--------------- JOB ITERATION FINISHED ---------------')\n    except Exception as err:\n        siemplify.LOGGER.error('Got exception on main handler.Error: {0}'.format(err.message))\n        raise\n\n\nif __name__ == '__main__':\n    main()\n",
    "Version": 1
}