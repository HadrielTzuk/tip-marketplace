{
    "CreationTimeUnixTimeInMs": 1523801165235,
    "Creator": "admin",
    "Description": " Search for urlscan.io existing scans by attributes such as domains, IPs, Autonomous System (AS) numbers, hashes, etc.  The action will find public scans performed by anyone as well as unlisted and private scans performed by you or your teams.",
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"Entity\": \"0.0.x.x\", \"EntityResult\": [{\"indexedAt\": \"2020-12-21T18:06:51.758Z\", \"task\": {\"visibility\": \"public\", \"method\": \"automatic\", \"domain\": \"reserve.xxxx.ca\", \"time\": \"2020-12-21T18:06:21.677Z\", \"source\": \"certstream-suspicious\", \"uuid\": \"8baedb2c-040c-4b89-ba3f-xxxx\", \"url\": \"https://reserve.xxxx.ca\"}, \"stats\": {\"uniqIPs\": 4, \"consoleMsgs\": 1, \"uniqCountries\": 2, \"dataLength\": 39187022, \"encodedDataLength\": 39202573, \"requests\": 11}, \"page\": {\"country\": \"US\", \"server\": \"nginx/1.17.1\", \"city\": \"North Bergen\", \"domain\": \"reserve.billdion.ca\", \"ip\": \"104.248.xx.xx\", \"mimeType\": \"text/html\", \"asnname\": \"DIGITALOCEAN-ASN, US\", \"asn\": \"AS14061\", \"url\": \"https://reserve.xxxx.ca/\", \"status\": \"200\"}, \"_id\": \"8baedb2c-040c-4b89-ba3f-xxxx\", \"sort\": [1608573981677, \"8baedb2c-040c-4b89-ba3f-xxxx\"], \"result\": \"https://urlscan.io/api/v1/result/8baedb2c-040c-4b89-ba3f-xxxx/\", \"screenshot\": \"https://urlscan.io/screenshots/8baedb2c-040c-4b89-ba3f-xxxxx.png\"}, {\"indexedAt\": \"2020-12-20T18:19:30.042Z\", \"task\": {\"visibility\": \"public\", \"method\": \"automatic\", \"domain\": \"www.user-xxxx.nl\", \"time\": \"2020-12-20T18:19:13.755Z\", \"source\": \"certstream-suspicious\", \"uuid\": \"db4b87cf-37b4-4c9a-a0e2-xxxx\", \"url\": \"https://www.user-xxxx.nl\"}, \"stats\": {\"uniqIPs\": 2, \"consoleMsgs\": 0, \"uniqCountries\": 1, \"dataLength\": 332, \"encodedDataLength\": 446, \"requests\": 2}, \"page\": {\"country\": \"NL\", \"server\": \"nginx/1.6.2\", \"domain\": \"www.xxxx.nl\", \"ip\": \"2a01:7c8:aabc:2e:xxxx:ff:xxxx:1b7d\", \"mimeType\": \"text/html\", \"asnname\": \"TRANSIP-AS Amsterdam, the Netherlands, NL\", \"asn\": \"AS20857\", \"url\": \"http://www.xxxx.nl/\", \"status\": \"200\"}, \"_id\": \"db4b87cf-37b4-4c9a-a0e2-xxxx\", \"sort\": [1608488353755, \"db4b87cf-37b4-4c9a-a0e2-xxxx\"], \"result\": \"https://urlscan.io/api/v1/result/db4b87cf-37b4-4c9a-a0e2-xxxx/\", \"screenshot\": \"https://urlscan.io/screenshots/db4b87cf-37b4-4c9a-a0e2-xxxx.png\"}, {\"indexedAt\": \"2020-12-18T14:22:50.487Z\", \"task\": {\"visibility\": \"public\", \"method\": \"manual\", \"domain\": \"0.0.x.x\", \"time\": \"2020-12-18T14:22:34.806Z\", \"uuid\": \"e9bccb55-d818-4433-9640-xxxx\", \"url\": \"http://0.0.x.x:4100\"}, \"stats\": {\"uniqIPs\": 0, \"uniqCountries\": 0, \"dataLength\": 0, \"requests\": 0}, \"page\": {\"domain\": \"0.0.x.x\", \"url\": \"http://0.0.x.x:4100\"}, \"_id\": \"e9bccb55-d818-4433-9640-xxxx\", \"sort\": [1608301354806, \"e9bccb55-d818-4433-9640-xxxx\"], \"result\": \"https://urlscan.io/api/v1/result/e9bccb55-d818-4433-9640-xxxx/\", \"screenshot\": \"https://urlscan.io/screenshots/e9bccb55-d818-4433-9640-xxxx.png\"}, {\"indexedAt\": \"2020-12-18T14:21:30.743Z\", \"task\": {\"visibility\": \"public\", \"method\": \"manual\", \"domain\": \"0.0.x.x\", \"time\": \"2020-12-18T14:21:01.428Z\", \"uuid\": \"ceab2974-1fb2-4995-8d73-xxxx\", \"url\": \"http://0.0.x.x:3030\"}, \"stats\": {\"uniqIPs\": 0, \"uniqCountries\": 0, \"dataLength\": 0, \"requests\": 0}, \"page\": {\"domain\": \"0.0.x.x\", \"url\": \"http://0.0.x.x:3030\"}, \"_id\": \"ceab2974-1fb2-4995-8d73-xxxx\", \"sort\": [1608301261428, \"ceab2974-1fb2-4995-8d73-xxxx\"], \"result\": \"https://urlscan.io/api/v1/result/ceab2974-1fb2-4995-8d73-xxxx/\", \"screenshot\": \"https://urlscan.io/screenshots/ceab2974-1fb2-4995-8d73-xxxx.png\"}]}]",
            "ResultName": "JsonResult"
        }
    ],
    "Id": -1,
    "IntegrationIdentifier": "UrlScanIo",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1523801165235,
    "Name": "Search for Scans",
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1523801165235,
            "CustomActionId": -1,
            "DefaultValue": "100",
            "Description": "Number of scans to return per entity. Default: 100, Max: 10000 (depending on subscription)",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1523801165235,
            "Name": "Max Scans",
            "Type": 0,
            "Value": "100"
        }
    ],
    "Script": "from SiemplifyDataModel import EntityTypes\nimport requests\nimport json\nimport base64\nfrom UrlScanManager import UrlScanManager\nfrom SiemplifyAction import SiemplifyAction\n\ndef main():\n    siemplify = SiemplifyAction()\n    \n    conf = siemplify.get_configuration('UrlScan')\n    api_key = conf.get('ApiKey')\n    url_scan_manager = UrlScanManager(api_key)\n\n    entities_to_update = []\n\n    for entity in siemplify.target_entities:\n        if entity.entity_type == EntityTypes.URL:\n\n            # Submit url for scan\n            scan_res = url_scan_manager.scan(entity.identifier.lower())\n\n            # Check if submission successful\n            if scan_res:\n                # Get scan ID for scan report\n                scan_id = scan_res['uuid']\n                # Get scan report\n                scan_report = url_scan_manager.get_scan_report(scan_id)\n\n            if scan_report:\n                entities_to_update.append(entity)\n                # Add web link to full scan result\n                siemplify.result.add_link(\"Web Report - {0}\".format(entity.identifier), scan_res['result'])\n                # Add IP/ASNs, IP Detail, (Sub)Domains, Domain Tree, Links, Certificates data.\n                siemplify.result.add_json(entity.identifier, json.dumps(scan_report['lists']))\n                # Add screenshot\n                screenshot = requests.get(scan_report['task']['screenshotURL'])\n                siemplify.result.add_attachment('Screenshot - {0}'.format(entity.identifier), 'sss.png'.format(scan_id), base64.b64encode(screenshot.content))\n\n    if entities_to_update:\n        output_massage = 'Following entities were scanned by urlscan.io. \\n{0}'.format(entities_to_update)\n        result_value = 'true'\n    else:\n        output_massage = 'No entities were scanned.'\n        result_value = 'false'\n\n    siemplify.end(output_massage, result_value)\n\nif __name__ == \"__main__\":\n    main()",
    "ScriptResultName": "is_success",
    "SimulationDataJson": "{\"Entities\": [\"DestinationURL\", \"ADDRESS\", \"HOSTNAME\", \"FILEHASH\", \"FILENAME\"]}",
    "Version": 1.0
}