{
  "type": 3,
  "actionIdentifier": "List Host Vulnerabilities",
  "title": "CB Cloud - List Host Vulnerabilities",
  "description": "This widget highlights the most important items in CB Cloud - List Host Vulnerabilities",
  "dataDefinition":
  {
    "htmlContent": "<!DOCTYPE html><html><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i\" rel=\"stylesheet\"><link href='https://www.siemplify.co/wp-content/cache/min/1/wp-content/themes/siemplify/assets/fonts/fonts.min.css?ver=1628709624' rel='stylesheet'><style> body { padding: 0; margin: 0; background-color: #212C45; overflow: auto; -ms-overflow-style: none; scrollbar-width: none; } ::-webkit-scrollbar { width: 0; } .cardContainer { display: flex; } .logo { display: flex; justify-content: flex-end; margin: 8px; } .cntLeftSide { display: flex; flex-direction: column; width: 30%; padding-right: 6px; } .cntRightSide { width: 65%; padding-left: 3%; border-left: 1px solid #576B95; } h1 { font-weight: bold; font-size: 104px; text-shadow: 1px 1px #fff; margin: 0; } h3 { font-weight: bold; font-size: 26px; margin: 0; text-align: center; } .fieldTitle { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #576B95; margin-bottom: 4px; } .fieldEntityTitle { font-weight: bold; font-size: 20px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; max-width: 70%; } .AlertsFound { display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 7% 4%; text-align: center; } .vulnerability-severities { display: flex; justify-content: center; align-items: center; width: 100%; margin-bottom: 28px; flex-wrap: wrap; } .vulnerability-severities p { font-size: 14px; font-weight: bold; } .vulnerability-severities > div { display: flex; margin-right: 6%; min-width: 65px; align-items: center; } .vulnerability-severities .severity-color { margin-right: 10px; width: 32px; height: 32px; border-radius: 50%; display: flex; justify-content: center; align-items: center; } .severity-critical-color { background-color: #FF5A50; } .severity-high-color { background-color: #FA903E; } .severity-medium-color { background-color: #FFED2E; } .severity-low-color { background-color: #42C3D0; } .circle-number { color: #161626; } .vulnerabilities-table table { margin: 22px 2%; width: 96%; border-collapse: collapse; word-break: break-word; } .vulnerabilities-table table tr td a { color: #669DF6; text-decoration-line: underline; } .vulnerabilities-table table tr th { text-align: left; border-bottom: 1px solid #576B95; border-top: 1px solid #576B95; padding: 10px; font-weight: bold; } .vulnerabilities-table table tr td { line-height: 16px; text-align: left; border-bottom: 1px solid #576B95; padding: 10px; color: #C3D2E8; } .description { width: 12vw; cursor: pointer; word-break: break-word; } .description-hidden { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } span.container-list-item { height: 38px; line-height: 38px; display: block; padding-left: 10px; cursor: pointer; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; color: #C3D2E8; } span.container-list-item.active { background: #3A4A6C; font-weight: bold; color: #fff; } .nothing-found { width: 100%; float: left; padding: 20px 0; text-align: center; display: none; }</style><body style=\"margin:0 auto; font-family: Open Sans, serif;font-size: 12px; color: #fff\"><p id=\"nothingFound\" class=\"nothing-found\">Nothing found.</p><div id=\"container\" class=\"cardContainer\"> <div class=\"cntLeftSide\" id=\"list\"></div> <div id=\"content\" class=\"cntRightSide\"> </div></div></body><script> window.addEventListener('load', init, false); const vulnerabilitiesData = [{stepInstanceName}.JsonResult]; const listElement = document.getElementById('list'); const contentElement = document.getElementById('content'); const containerElement = document.getElementById('container'); const noDataElement = document.getElementById('nothingFound'); let activeItem; const dataExists = !isEmptyArray(vulnerabilitiesData); function init() { if (dataExists) { setVulnerabilitiesData(); } else { setNothingFound(); } } function setVulnerabilitiesData() { setListElements(); addListenerToListElement(); setFirstItemData(); } function calculateHeight() { const innerHeight = window.innerHeight; const contentElementHeight = contentElement.getBoundingClientRect().height; listElement.style.maxHeight = contentElementHeight > innerHeight ? `${contentElementHeight}px` : `${innerHeight}px`; } function setNothingFound() { noDataElement.style.display = 'block'; containerElement.style.display = 'none'; } function setFirstItemData() { setContent(vulnerabilitiesData[0].Entity); setActiveItem(listElement.children[0]); } function setListElements() { let listHtml = ''; vulnerabilitiesData.forEach((item, index) => { listHtml += getListItemHtml(item.Entity, index, item.Entity); }); listElement.innerHTML = listHtml; } function addListenerToListElement() { listElement.addEventListener('click', onListClick); } function getListItemHtml(displayName, index, identifier) { return `<span class=\"container-list-item\" data-id=\"${identifier}\">${displayName}</span>`; } function onListClick(event) { const targetElement = event.target; if (targetElement.dataset.hasOwnProperty('id')) { activeItem.classList.remove('active'); const identifier = event.target.dataset.id; targetElement.classList.add('active'); setActiveItem(targetElement); setContent(identifier); } } function setActiveItem(item) { activeItem = item; activeItem.classList.add('active'); } function setContent(identifier) { const activeItem = vulnerabilitiesData.find(item => item.Entity === identifier); contentElement.innerHTML = getContentHtml(activeItem); addDescriptionListeners(); calculateHeight(); } function getContentHtml(dataItem) { return getVulnerabilitiesCountHtml(dataItem?.EntityResult?.details?.length, dataItem) + getVulnerabilitySeveritiesHtml(dataItem?.EntityResult?.statistics?.severity) + getVulnerabilityTableHtml(dataItem?.EntityResult?.details); } function getVulnerabilitiesCountHtml(count, item) { return `<div> <div class=\"fieldTitle\"> <div class=\"fieldEntityTitle\">${item.Entity}</div> <div class=\"logo\"> <svg class=\"logo-svg\" height=\"64px\" fill=\"currentColor\" viewBox=\"0 0 25 25\"><path d=\"M3.8,8.8c-0.3-0.6-1-0.9-1.6-0.6c-0.7,0.3-0.9,1-0.6,1.6l2.7,5.8c0.4,0.9,0.9,1.4,1.7,1.4c0.9,0,1.3-0.5,1.7-1.4 c0,0,2.3-5.1,2.4-5.1c0,0,0.1-0.2,0.3-0.2c0.2,0,0.3,0.2,0.3,0.4v4.9c0,0.7,0.4,1.4,1.2,1.4c0.8,0,1.3-0.6,1.3-1.4v-4.1 c0-0.8,0.6-1.3,1.3-1.3c0.7,0,1.3,0.5,1.3,1.3v4.1c0,0.7,0.4,1.4,1.2,1.4c0.8,0,1.3-0.6,1.3-1.4v-4.1c0-0.8,0.6-1.3,1.3-1.3 s1.3,0.5,1.3,1.3v4.1c0,0.7,0.4,1.4,1.2,1.4c0.8,0,1.3-0.6,1.3-1.4V11c0-1.7-1.4-2.9-3-2.9s-2.7,1.1-2.7,1.1 c-0.6-0.7-1.3-1.1-2.6-1.1c-1.4,0-2.5,1.1-2.5,1.1c-0.5-0.7-1.5-1.1-2.2-1.1c-1.2,0-2.1,0.5-2.7,1.8l-1.7,4L3.8,8.8\"></path></svg> </div> </div> <div class=\"AlertsFound\"> <h1>${count || 0}</h1> <h3>VULNERABILITIES FOUND</div> </div> </div>`; } function getVulnerabilitySeveritiesHtml(severities) { return `<div class=\"vulnerability-severities\"> <div class=\"severity-critical\"> <div class=\"severity-color severity-critical-color\"><p class=\"circle-number\">${severities.critical}</p></div> <div> <p>Critical</p> </div> </div> <div class=\"severity-high\"> <div class=\"severity-color severity-high-color\"><p class=\"circle-number\">${severities.important}</p></div> <div> <p>Important</p> </div> </div> <div class=\"severity-medium\"> <div class=\"severity-color severity-medium-color\"><p class=\"circle-number\">${severities.moderate}</p></div> <div> <p>Moderate</p> </div> </div> <div class=\"severity-low\"> <div class=\"severity-color severity-low-color\"><p class=\"circle-number\">${severities.low}</p></div> <div> <p>Low</p> </div> </div> </div>` } function getVulnerabilityTableHtml(tableData) { if (!isEmptyArray(tableData)) { let tableRows = ''; tableData.slice(0, 10).forEach((item, index) => { tableRows += getVulnerabilityTableRowHtml(item, index) }); return `<div id=\"vulnerabilitiesTable\" class=\"vulnerabilities-table\"> </br> <table> <thead> <tr> <th>Severity</th> <th>CVE</th> <th>Risk Score</th> <th>Description</th> <th>Solution</th> <th>Exploitable</th> <th>Created Time</th> </tr> </thead> <tbody> ${tableRows} </tbody> </table> </div>` } return ''; } function getExploitStatus(status) { if (status === 30) { return 'Available' } if (status === 60) { return 'Easily Accessible' } if (status === 90) { return 'Actively Used' } return 'Unproven' } function addDescriptionListeners() { const descriptionViewMoreElements = document.getElementsByClassName('description'); Array.from(descriptionViewMoreElements).forEach(elem => { elem.addEventListener('click', showFullDescription) }) } function showFullDescription(event) { const classList = event.target.classList; const nextSibling = event.target.nextElementSibling; const nextSiblingClassList = event.target.nextElementSibling?.classList; if (nextSibling) { if (nextSiblingClassList.contains('description-hidden')) { nextSiblingClassList.remove('description-hidden') } else { nextSiblingClassList.add('description-hidden') } } else { if (classList.contains('description-hidden')) { classList.remove('description-hidden') } else { classList.add('description-hidden') } } } function createDescriptionCeil(text) { const firstPart = text.slice(0, 250); const secondPart = text.slice(250); return `<div class=\"description\">${firstPart}</div> <div class=\"description description-hidden\">${secondPart}</div>` } function getVulnerabilityTableRowHtml(rowData) { return `<tr> <td>${rowData?.vuln_info?.severity === 'SEVERITY_UNSPECIFIED' ? 'UNSPECIFIED' : rowData.vuln_info.severity.toUpperCase()}</td> <td><a target=\"_blank\" href=\"${rowData.vuln_info.nvd_link ? rowData?.vuln_info?.nvd_link : ''}\">${rowData?.vuln_info?.cve_id}</a></td> <td>${getExploitStatus(rowData?.vuln_info?.risk_meter_score)}</td> <td>${createDescriptionCeil(rowData?.vuln_info?.cve_description)}</td> <td>${rowData?.vuln_info?.solution}</td> <td>${rowData?.vuln_info?.easily_exploitable}</td> <td>${rowData?.vuln_info?.created_at}</td> </tr>` } function isEmptyArray(arr) { return !arr || !arr.length || arr.length === 0; }</script></html>",
    "htmlHeight": 400,
    "safeRendering": false,
    "type": 3,
    "widgetDefinitionScope": 2
  },
  "conditionsGroup": {
    "conditions": [
      {
        "value": "true",
        "fieldName": "[{stepInstanceName}.is_success]",
        "matchType": 0
      }
    ],
    "logicalOperator": 0
  },
  "defaultSize": 1
}
