from SiemplifyUtils import output_handler
from SiemplifyDataModel import EntityTypes
from SiemplifyAction import SiemplifyAction
from SiemplifyUtils import dict_to_flat, construct_csv, convert_dict_to_json_result_dict
from MalwareDomainListManager import MalwareDomainListManager

SCRIPT_NAME = "MalwareDomainList - CheckURL"


@output_handler
def main():
    siemplify = SiemplifyAction()
    siemplify.script_name = SCRIPT_NAME
    conf = siemplify.get_configuration("MalwareDomainList")
    use_ssl = conf.get('Verify SSL', 'False').lower() == 'true'
    result_value = 0
    mdl_manager = MalwareDomainListManager(use_ssl=use_ssl)

    enriched_entities = []
    json_results = {}

    for entity in siemplify.target_entities:
        if entity.entity_type == EntityTypes.URL:
            try:
                domain_records = mdl_manager.get_domain_records(
                    entity.additional_properties.get('OriginalIdentifier') or \
                    entity.identifier.lower()
                )
                if domain_records:
                    json_results[entity.identifier] = domain_records
                    for domain in domain_records:

                        # Remove irrelevant data
                        if 'Inactive' in domain:
                            del domain['Inactive']

                        if 'Registrant' in domain:
                            del domain['Registrant']

                        if 'ASN' in domain:
                            del domain['ASN']

                    # If records are available - then entity suspicious
                    domain_records = map(dict_to_flat, domain_records)
                    csv_output = construct_csv(domain_records)
                    siemplify.result.add_entity_table(
                        '{} - Domain Records'.format(
                            entity.identifier),
                        csv_output)
                    entity.is_suspicious = True
                    siemplify.add_entity_insight(entity,
                                                 "{} was found suspicious".format(
                                                     entity.identifier),
                                                 triggered_by='MalwareDomainList')
                    result_value = len(domain_records)
                    enriched_entities.append(entity)

            except Exception as e:
                # An error occurred - skip entity and continue
                siemplify.LOGGER.error(
                    "An error occurred on entity: {}.\n{}.".format(
                        entity.identifier, str(e)
                    ))
                siemplify.LOGGER.exception(e)

    if enriched_entities:
        entities_names = [entity.identifier for entity in enriched_entities]

        output_message = 'MalwareDomainList: The following domains and urls were found suspicious:\n' + '\n'.join(
            entities_names)

        siemplify.update_entities(enriched_entities)

    else:
        output_message = 'MalwareDomainList: No suspicious entities were found.'

    siemplify.result.add_result_json(convert_dict_to_json_result_dict(json_results))
    siemplify.end(output_message, result_value)


if __name__ == '__main__':
    main()