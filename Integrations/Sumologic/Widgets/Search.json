{
  "type": 3,
  "actionIdentifier": "Search",
  "title": "Sumologic - Search",
  "description": "This widget highlights the most important items in Sumologic - Search.",
  "dataDefinition":
  {
    "htmlContent": "<!DOCTYPE html><html lang=\"en\"><head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i\" rel=\"stylesheet\"> <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script> <title>Query Widget</title> <style>body{float: left; width: 100%; padding: 0; margin: 0; box-sizing: border-box; background-color: #212C45;}.widget-container{padding: 0 20px;}::-webkit-scrollbar{width: 0;}.logo{text-align: right; padding-top: 8px; padding-bottom: 8px;}.logo svg{vertical-align: top;}.notable{overflow-x: auto;}.notable table{width: 100%; margin-left: 0; margin-right: 0;}.notable table tr th{white-space: nowrap; min-width: 100px;}.notable table tr th{text-align: left; border-bottom: 1px solid #576B95; border-top: 1px solid #576B95; padding: 10px; font-weight: bold;}table{margin: 22px 2%; width: 96%; border-collapse: collapse; word-break: break-word;}.playbook table tr td{line-height: 16px; text-align: left; border-bottom: 1px solid #576B95; padding: 10px; color: #C3D2E8;}.MainCounter{display: flex; justify-content: center; align-items: center; padding: 32px 4% 36px 4%; text-align: center;}h1{font-weight: bold; font-size: 104px; text-shadow: 1px 1px #fff; margin: 0;}h3{font-weight: bold; font-size: 26px; margin: 0; text-align: center;}.longText{width: 20vw; cursor: pointer;}.longText-hidden{white-space: nowrap; overflow: hidden; text-overflow: ellipsis;}</style></head><body style=\"font-family: Open Sans, serif; font-size: 14px; color: #fff\"><div class=\"widget-container\"><div class=\"logo\"> <svg class=\"logo-svg\" width=\"25\" height=\"25\" viewBox=\"0 0 50 50\" fill=\"currentColor\"> <path d=\"M35.7,6.7H14.3c-4.2,0-7.6,3.4-7.6,7.6v21.5c0,4.2,3.4,7.6,7.6,7.6h21.5c4.2,0,7.6-3.4,7.6-7.6V14.3C43.3,10.1,39.9,6.7,35.7,6.7z M32.5,27.1h-5.3v5.3c0,1.2-1,2.1-2.1,2.1s-2.1-1-2.1-2.1v-5.3h-5.3c-1.2,0-2.1-1-2.1-2.1s1-2.1,2.1-2.1h5.3v-5.3c0-1.2,1-2.1,2.1-2.1s2.1,1,2.1,2.1v5.3h5.3c1.2,0,2.1,1,2.1,2.1S33.6,27.1,32.5,27.1z\"/> </svg></div><div class=\"MainCounter\" > <div> <h1 id=\"count\"></h1> <div class=\"simi-alerts \"> <div> <h3 id=\"alerts-title\"></h3> </div></div></div></div><div class=\"playbook notable\"> <table> <thead id=\"fieldHeaders\"></thead> <tbody id=\"fieldData\"></tbody> </table></div></div><script>$(document).ready(()=>{const actionListData=[{stepInstanceName}.JsonResult]; if (!actionListData.length){return;}const dataCount=actionListData.length; if (dataCount===1){$(\"#alerts-title\").html(\"RESULT FOUND\");}else{$(\"#alerts-title\").html(\"RESULTS FOUND\");}$(\"#count\").html(dataCount); const iterListData=actionListData; const tableMapping={}; for (const item of iterListData){for (const key of Object.keys(item)){if (tableMapping[key]===undefined){tableMapping[key]=[];}}}for (const [heading, dataArray] of Object.entries(tableMapping)){for (const item of iterListData){dataArray.push(fieldExists(item[heading]));}}const initialValue=\"\"; const keys=Object.keys(tableMapping); const headerHTML=`<tr>${keys.map( key=> key.toString() .replace(/^[-_]*(.)/, (_, c)=> c.toUpperCase()) .replace(/[-_]+(.)/g, (_, c)=> \" \" + c.toUpperCase()) ).reduce((headerString, key)=> headerString + `<th>${key}</th>`, initialValue)}</tr>`; const tableColumns=Object.values(tableMapping); // Transposing from columns to rows const tableRows=tableColumns[0].map((col, i)=> tableColumns.map(row=> row[i])); const isObject=obj=> obj && obj.constructor===({}).constructor; const bodyHTML=tableRows.reduce( (tableRows, tableRowArray)=> tableRows + `<tr>${tableRowArray.reduce( (dataCells, dataCell)=>{if (Array.isArray(dataCell)){dataCell=dataCell .map(item=> isObject(item) ? JSON.stringify(item, null, 4) : item) .join(\", \");}else if (isObject(dataCell)){dataCell=JSON.stringify(dataCell, null, 4);}return dataCells + `<td>${createLongTextCeil(dataCell ? dataCell.toString() : \"\")}</td>`;}, initialValue )}</tr>`, initialValue ); $(\"#fieldHeaders\").html(headerHTML); $(\"#fieldData\").html(bodyHTML); $(\"th\").each(function(idx, _){const check=Boolean( $(\"tbody tr\").find(\"td:eq(\" + idx + \")\").filter(function(){return $.trim($(this).text())===\"N/A\" ? 0 : 1;}).length ); $(\"tr\").find(\"td:eq(\" + idx + \"), th:eq(\" + idx + \")\").toggle(check);}); function fieldExists(field){return field===undefined ? \"N/A\" : field;}addLongTextClickLogic(); function createLongTextCeil(text){if (!text){return text;}const firstPart=text.slice(0, 250); const secondPart=text.slice(250); const className='longText'; const hiddenClassName=`${className}-hidden`; return `<div class=\"${className}\">${firstPart}</div><div class=\"${className}${hiddenClassName}\">${secondPart}</div>`;}function addLongTextClickLogic(){$('.longText').click(event=>{const classList=event.target.classList; const nextSibling=event.target.nextElementSibling; const nextSiblingClassList=event.target.nextElementSibling?.classList; const className=\"longText\"; const hiddenClassName=`${className}-hidden`; if (nextSibling){if (nextSiblingClassList.contains(hiddenClassName)){nextSiblingClassList.remove(hiddenClassName);}else{nextSiblingClassList.add(hiddenClassName);}}else{if (classList.contains(hiddenClassName)){classList.remove(hiddenClassName);}else{classList.add(hiddenClassName);}}});}});</script></body></html>",
    "htmlHeight": 400,
    "safeRendering": false,
    "type": 3,
    "widgetDefinitionScope": 2
  },
  "conditionsGroup": {
    "conditions": [
      {
        "value": "[]",
        "fieldName": "[{stepInstanceName}.JsonResult]",
        "matchType": 5
      },
      {
        "value": "[{",
        "fieldName": "[{stepInstanceName}.results]",
        "matchType": 1
      }
    ],
    "logicalOperator": 0
  },
  "defaultSize": 1
}
