from SiemplifyUtils import output_handler
from SiemplifyAction import SiemplifyAction
from AttivoManager import AttivoManager
from TIPCommon import extract_configuration_param, extract_action_param
from ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED
from constants import INTEGRATION_NAME, INTEGRATION_DISPLAY_NAME, LIST_VULNERABILITY_HOSTS_SCRIPT_NAME
from TIPCommon import construct_csv, dict_to_flat
from UtilsManager import convert_comma_separated_to_list
from AttivoExceptions import InvalidVulnerabilityException


@output_handler
def main():
    siemplify = SiemplifyAction()
    siemplify.script_name = LIST_VULNERABILITY_HOSTS_SCRIPT_NAME
    siemplify.LOGGER.info("----------------- Main - Param Init -----------------")

    api_root = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="API Root",
                                           is_mandatory=True, print_value=True)
    username = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Username",
                                           is_mandatory=True, print_value=True)
    password = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Password",
                                           is_mandatory=True)
    verify_ssl = extract_configuration_param(siemplify, provider_name=INTEGRATION_NAME, param_name="Verify SSL",
                                             input_type=bool, is_mandatory=True, print_value=True)

    # Action parameters
    vulnerabilities = extract_action_param(siemplify, param_name="Vulnerabilities", print_value=True, is_mandatory=True)
    limit = extract_action_param(siemplify, param_name="Max Hosts To Return", input_type=int, default_value=50,
                                 print_value=True)

    siemplify.LOGGER.info("----------------- Main - Started -----------------")

    result = True
    status = EXECUTION_STATE_COMPLETED
    successful_vulnerabilities, failed_vulnerabilities, not_found_vulnerabilities, json_results = [], [], [], []

    try:
        vulnerabilities = convert_comma_separated_to_list(vulnerabilities)
        if limit is not None:
            if limit < 1:
                raise Exception(f"Invalid value was provided for \"Max ThreatPaths to Return\": {limit}. "
                                f"Positive number should be provided")

        manager = AttivoManager(api_root=api_root, username=username, password=password, verify_ssl=verify_ssl,
                                siemplify_logger=siemplify.LOGGER)

        for vulnerability in vulnerabilities:
            try:
                hosts = manager.get_vulnerability_hosts(vulnerability, limit)
                if hosts:
                    successful_vulnerabilities.append(vulnerability)
                    siemplify.result.add_data_table(vulnerability,
                                                    construct_csv([dict_to_flat({"Name": host}) for host in hosts]))
                    json_results.append({"vulnerability": vulnerability,
                                         "hostNames": hosts})
                else:
                    failed_vulnerabilities.append(vulnerability)
            except InvalidVulnerabilityException:
                not_found_vulnerabilities.append(vulnerability)

        if successful_vulnerabilities:
            output_message = f'Successfully retrieved hosts for the following vulnerabilities: ' \
                             f'{", ".join(successful_vulnerabilities)}\n'
            siemplify.result.add_result_json(json_results)

            if failed_vulnerabilities:
                output_message += f'No hosts were found for the following vulnerabilities: ' \
                                  f'{", ".join(failed_vulnerabilities)}\n'

            if not_found_vulnerabilities:
                output_message += f'Action wasn\'t able to retrieve information about hosts for the following ' \
                                  f'vulnerabilities: {", ".join(not_found_vulnerabilities)}\n'

        else:
            result = False
            if not_found_vulnerabilities:
                output_message = f"Action wasn\'t able to retrieve information about hosts for the provided " \
                                 f"vulnerabilities."
            else:
                output_message = f"No hosts were found for the provided vulnerabilities."

    except Exception as e:
        siemplify.LOGGER.error(f"General error performing action {LIST_VULNERABILITY_HOSTS_SCRIPT_NAME}")
        siemplify.LOGGER.exception(e)
        result = False
        status = EXECUTION_STATE_FAILED
        output_message = f"Error executing action \"{LIST_VULNERABILITY_HOSTS_SCRIPT_NAME}\". Reason: {e}"

    siemplify.LOGGER.info("----------------- Main - Finished -----------------")
    siemplify.LOGGER.info("Status: {}".format(status))
    siemplify.LOGGER.info("Result: {}".format(result))
    siemplify.LOGGER.info("Output Message: {}".format(output_message))

    siemplify.end(output_message, result, status)


if __name__ == '__main__':
    main()
