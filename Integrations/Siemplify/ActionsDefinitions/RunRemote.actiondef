{
    "CreationTimeUnixTimeInMs": 1531236227995,
    "Creator": "admin",
    "Description": "Run remote action via publisher",
    "Id": -1,
    "IntegrationIdentifier": "Siemplify",
    "IsCustom": false,
    "IsEnabled": true,
    "IsSystem": true,
    "ModificationTimeUnixTimeInMs": 1531236227995,
    "Name": "Run Remote",
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": "",
            "Description": "Publisher instance name to be used.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Publisher Name",
            "Type": 0,
            "Value": ""
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": "",
            "Description": "Remote integration name to be used.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Remote Integration Name",
            "Type": 0,
            "Value": ""
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": "",
            "Description": "Remote action name to be used.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Remote Action Name",
            "Type": 0,
            "Value": ""
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": null,
            "Description": "Remote action context data.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Remote Context Data",
            "Type": 0,
            "Value": null
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": null,
            "Description": "Remote action script content to be executed.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Remote Action Script",
            "Type": 0,
            "Value": null
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": null,
            "Description": "Action's target agent id.",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Agent ID",
            "Type": 0,
            "Value": null
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": null,
            "Description": "Installed Integrations Shared Folder",
            "Id": -1,
            "IsMandatory": true,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Installed Integrations Shared Folder",
            "Type": 0,
            "Value": null
        },
        {
            "CreationTimeUnixTimeInMs": 1531236227995,
            "CustomActionId": -1,
            "DefaultValue": null,
            "Description": "Enables\\Disables SSL Verification between Siemplify's machine and the remote Publisher",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1531236227995,
            "Name": "Verify SSL",
            "Type": 1,
            "Value": null
        }
    ],
    "Script": "from SiemplifyAction import SiemplifyAction\nimport requests\nimport os\nimport json\nimport base64\nfrom cryptography.fernet import Fernet\nfrom Crypto.PublicKey import RSA\nimport SiemplifyUtils\nimport time\nimport sys\nrequests.packages.urllib3.disable_warnings()\n\nSDK_PATH = r\"C:\\repos\\SIEMplify\\Dynamo-1.97\\Server\\Services\\Siemplify.Server.Service\\bin\\Debug\\Scripting\\PythonSDK\"\nMARKET_PLACE_PATH = r\"C:\\Siemplify_Server\\Marketplace\\Integrations\"\nMANAGERS_PATH = \"Managers\"\nACTIONS_SCRIPTS_PATH = \"ActionsScripts\"\nACTIONS_DEFINITIONS_PATH = \"ActionsDefinitions\"\nCOMPLETED = 'COMPLETED'\nCOMPLETION_STATUSES = ['COMPLETED', 'FAILED']\n\n\ndef symmetric_encrypt(data, key):\n    cipher_suite = Fernet(key)\n    return cipher_suite.encrypt(data)\n\n\ndef symmetric_decrypt(data, key):\n    cipher_suite = Fernet(key)\n    return cipher_suite.decrypt(data)\n\n\ndef validate_response(response, error_msg=\"An error occurred\"):\n    try:\n        response.raise_for_status()\n\n    except requests.HTTPError as error:\n        raise Exception(\n            \"{error_msg}: {error} - {text}\".format(\n                error_msg=error_msg,\n                error=error,\n                text=error.response.content)\n        )\n\n\ndef main():\n    siemplify = SiemplifyAction()\n    conf = siemplify.get_configuration(\"SiemplifyPublisher\")\n    proxy_server_address = conf['Publisher Server API Root']\n    api_token = conf['Publisher Server API Token']\n    cert_file_path = conf['Certificate Path']\n\n    integration_identifier = siemplify.parameters['Integration Name']\n    action_identifier = siemplify.parameters['Action Name']\n    context_data = open(r'c:\\temp\\context', 'r').read() #siemplify.parameters['Context Data']\n    integration_conf = siemplify.get_configuration(integration_identifier)\n    case_data = siemplify._get_case()\n\n    key = Fernet.generate_key()\n\n    if not os.path.exists(cert_file_path):\n        siemplify.end(\"Certificate not found at {}\".format(cert_file_path), 'false')\n\n    # Get asymmetric keys\n    with open(cert_file_path, 'r') as cert:\n        public_key = RSA.importKey(cert.read())\n\n    encrypted_symmetric_key = public_key.encrypt(key, 32)\n    encrypted_symmetric_key = base64.b64encode(encrypted_symmetric_key[0])\n    managers_path = os.path.join(MARKET_PLACE_PATH,\n                                 integration_identifier,\n                                 MANAGERS_PATH)\n\n    managers_data = []\n\n    if os.path.exists(managers_path):\n        for manager in os.listdir(managers_path):\n            src_path = os.path.join(SDK_PATH, manager)\n            managers_data.append({\n                manager: base64.b64encode(open(src_path, 'r').read())\n            })\n\n    action_script = \"\"\n\n    actions_def_path = os.path.join(MARKET_PLACE_PATH,\n                                    integration_identifier,\n                                    ACTIONS_DEFINITIONS_PATH)\n\n    actions_scripts_path = os.path.join(MARKET_PLACE_PATH,\n                                        integration_identifier,\n                                        ACTIONS_SCRIPTS_PATH)\n\n    if os.path.exists(actions_def_path):\n        for action_def in os.listdir(actions_def_path):\n            action_def_data = json.loads(open(os.path.join(actions_def_path, action_def), 'r').read())\n            if action_def_data['Name'] == action_identifier:\n                src_path = os.path.join(actions_scripts_path, \"{}.py\".format(\n                    os.path.splitext(action_def)[0]))\n                action_script = base64.b64encode(open(src_path, 'r').read())\n\n    if not action_script:\n        siemplify.end(\"Action script was not found\", 'false')\n\n    # Construct headers\n    headers = {\"Accept\": \"application/json\",\n               \"Content-Type\": \"application/json\",\n               \"Authorization\": \"Token {}\".format(api_token)\n               }\n\n    response = requests.post(\"{}/api/tasks/\".format(proxy_server_address),\n                             headers=headers,\n                             json={\n                                 \"managers_data\": symmetric_encrypt(\n                                     json.dumps(managers_data, ), key),\n                                 \"actions_data\": symmetric_encrypt(\n                                     action_script, key),\n                                 \"context_data\": symmetric_encrypt(\n                                     context_data, key),\n                                 'environment_id': siemplify.case.environment,\n                                 'action_identifier': symmetric_encrypt(\n                                     bytes(action_identifier), key),\n                                 'integration_identifier': symmetric_encrypt(\n                                     bytes(integration_identifier), key),\n                                 'integration_conf': symmetric_encrypt(\n                                     json.dumps(integration_conf), key),\n                                 'case_data': symmetric_encrypt(\n                                     json.dumps(case_data), key),\n                                 'key': encrypted_symmetric_key\n                             },\n                             verify=False)\n\n    validate_response(response, \"Unable to create remote task\")\n\n    task_id = response.json()['id']\n\n    # Wait for task to complete\n    while response.json()['status'] not in COMPLETION_STATUSES:\n        time.sleep(1)\n        response = requests.get(\n            r\"{}/api/tasks/{}/\".format(proxy_server_address, task_id),\n            headers=headers)\n        validate_response(response, \"Unable to get status for task {}\".format(task_id))\n\n    headers_siemplify = {\"Accept\": \"application/json\",\n                         \"Content-Type\": \"application/json\",\n                         \"AppKey\": siemplify._api_key\n                         }\n\n    if response.json()['status'] == COMPLETED:\n        # Task is successful\n        if response.json()['rest_actions']:\n            # Execute REST actions that were logged in the remote client\n            rest_actions = json.loads(\n                symmetric_decrypt(str(response.json()['rest_actions']),\n                                  key))\n\n            for rest_action in rest_actions:\n                for url, action_data in rest_action.items():\n                    r = requests.post(url, json=action_data,\n                                      headers=headers_siemplify,\n                                      verify=False)\n                    siemplify.validate_siemplify_error(r)\n\n        output_object = json.loads(\n            symmetric_decrypt(str(response.json()['script_result']), key))\n\n        # Delete the task\n        response = requests.delete(\n            r\"{}/api/tasks/{}/\".format(proxy_server_address, task_id),\n            headers=headers)\n        validate_response(response,\n                          \"Unable to delete task {}\".format(task_id))\n\n        SiemplifyUtils.real_stdout.write(json.dumps(output_object))\n        sys.exit(0)\n\n    else:\n        # Task has failed - write the error to stderr and\n        # exit with status code 1\n        error_message = json.loads(\n            symmetric_decrypt(str(response.json()['script_result']),\n                              key))[\n            'DebugOutput']\n        sys.stderr.write(unicode(error_message).encode(\"utf-8\"))\n\n        # Delete the task\n        response = requests.delete(\n            r\"{}/api/tasks/{}/\".format(proxy_server_address, task_id),\n            headers=headers)\n        validate_response(response,\n                          \"Unable to delete task {}\".format(task_id))\n\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "ScriptResultName": "success",
    "TimeoutSeconds": 600,
    "Version": 1.0,
    "SimulationDataJson": "{\"Entities\": []}",
    "IsAsync": true
}