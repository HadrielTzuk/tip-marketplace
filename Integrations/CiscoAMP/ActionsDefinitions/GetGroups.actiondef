{
    "CreationTimeUnixTimeInMs": 1527753041681,
    "Creator": "admin",
    "Description": "Get group details",
    "DynamicResultsMetadata": [
        {
            "ResultExample": "{\"1\": {\"source\": \"CreatedviaAPI\", \"guid\": \"1111111111111111111111\", \"name\": \"TestGroup\", \"description\": \"GroupcreatedbySiemplify\"}, \"0\": {\"source\": null, \"guid\": \"1111111111111111111111\", \"name\": \"Audit\", \"description\": \"AuditGroupforPartner-Siemplify\"}}",
            "ResultName": "JsonResult"
        }
    ],
    "Id": -1,
    "IntegrationIdentifier": "CiscoAMP",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1527753041681,
    "Name": "Get Groups",
    "Parameters": [],
    "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import dict_to_flat\nfrom CiscoAMPManager import CiscoAMPManager\nimport json\n\n\ndef main():\n    siemplify = SiemplifyAction()\n    configurations = siemplify.get_configuration('CiscoAMP')\n    server_addr = configurations['Api Root']\n    client_id = configurations['Client ID']\n    api_key = configurations['Api Key']\n    use_ssl = configurations['Use SSL'].lower() == 'true'\n\n    cisco_amp_manager = CiscoAMPManager(server_addr, client_id, api_key,\n                                        use_ssl)\n\n    groups = cisco_amp_manager.get_groups()\n\n    if groups:\n        flat_groups = []\n\n        for group in groups:\n            # Remove links - irrelevant\n            del group[\"links\"]\n            flat_groups.append(dict_to_flat(group))\n\n        # Attach groups in csv\n        csv_output = cisco_amp_manager.construct_csv(flat_groups)\n        siemplify.result.add_data_table(\"Groups\", csv_output)\n\n    siemplify.end(\"Successfully found {} groups.\".format(len(groups)), json.dumps(groups))\n\n\nif __name__ == '__main__':\n    main()\n",
    "ScriptResultName": "groups",
    "Version": 1.0,
    "SimulationDataJson": "{\"Entities\": []}"
}