from SiemplifyUtils import output_handler
from SiemplifyDataModel import EntityTypes
# Imports
from SiemplifyAction import SiemplifyAction
from SiemplifyUtils import dict_to_flat, flat_dict_to_csv, add_prefix_to_dict_keys, convert_dict_to_json_result_dict
from TitaniumCloud import TitaniumCloudClient
import json

# Consts
FILEHASH = EntityTypes.FILEHASH


@output_handler
def main():
    siemplify = SiemplifyAction()
    entities_to_enrich = []
    json_results = {}

    # Configuration.
    conf = siemplify.get_configuration("ReversinglabsTitanium")
    server_address = conf['Api Root']
    username = conf['Username']
    password = conf['Password']

    titanium_manager = TitaniumCloudClient(server_address, username, password)

    for entity in siemplify.target_entities:
        if entity.entity_type == FILEHASH:
            # Get type of hash
            hash_type = titanium_manager.get_type_of_hash(entity.identifier)
            # Lowering the hash so the query will find results (will not find results for uppercase hash)
            hash_lower = entity.identifier.lower()
            # Get complete sample by type of hash (md5, sha1, sha256) file hash
            sample_analyses = titanium_manager.single_query(hash_lower, hash_type, True)

            # Enrich and add csv table
            if sample_analyses:
                json_results[entity.identifier] = sample_analyses
                sample_analyses_json = sample_analyses['rl']['malware_presence']
                flat_report = dict_to_flat(sample_analyses_json)
                csv_output = flat_dict_to_csv(flat_report)
                flat_report = add_prefix_to_dict_keys(flat_report, "Reversinglabs Titanium")
                siemplify.result.add_entity_table(entity.identifier, csv_output)
                entity.additional_properties.update(flat_report)

                entities_to_enrich.append(entity)
                entity.is_enriched = True

    if entities_to_enrich:
        output_message = "Following entities were enriched by Reversinglabs Titanium. \n{0}".format(entities_to_enrich)
        result_value = True
        siemplify.update_entities(entities_to_enrich)
    else:
        output_message = 'No entities were enriched.'
        result_value = False

    # add json
    siemplify.result.add_result_json(convert_dict_to_json_result_dict(json_results))
    siemplify.end(output_message, result_value)


if __name__ == "__main__":
    main()