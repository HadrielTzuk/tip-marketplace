{
  "Name": "Get Technique Details",
  "Description": "Retrieve detailed information about MITRE attack technique",
  "IntegrationIdentifier": "MitreAttck",
  "ScriptResultName": "is_success",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "[{\"created_by_ref\":\"identity--c78cb6e5-0c4b-4611-8297-d1xxxxxxxxxx\",\"external_references\":[{\"url\":\"https://attack.mitre.org/techniques/Txxxx\",\"external_id\":\"Txxxx\",\"source_name\":\"mitre-attack\"},{\"url\":\"http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf\",\"source_name\":\"Zhang 2013\",\"description\":\"Zhang, H., Papadopoulos, C., & Massey, D. (2013, April). Detecting encrypted botnet traffic. Retrieved August 19, 2015.\"},{\"url\":\"https://en.wikipedia.org/wiki/List_of_file_signatures\",\"source_name\":\"Wikipedia File Header Signatures\",\"description\":\"Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.\"}],\"created\":\"2017-05-31T21:30:30.26Z\",\"x_mitre_platforms\":[\"Linux\",\"macOS\",\"Windows\"],\"type\":\"attack-pattern\",\"description\":\"Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\\n\\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over Command and Control Channel](https://attack.mitre.org/techniques/Txxxx) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/Txxxx)\",\"kill_chain_phases\":[{\"phase_name\":\"exfiltration\",\"kill_chain_name\":\"mitre-attack\"}],\"modified\":\"2018-10-17T00:14:20.652Z\",\"id\":\"attack-pattern--d54416bd-0803-41ca-870a-cexxxxxxxxxx\",\"object_marking_refs\":[\"marking-definition--fa42a846-8d90-4e51-bc29-71xxxxxxxxxx\"],\"x_mitre_network_requirements\":false,\"x_mitre_version\":\"1.0\",\"x_mitre_data_sources\":[\"File monitoring\",\"Process monitoring\",\"Process command-line parameters\",\"Binary file metadata\"],\"x_mitre_detection\":\"Encryption software and encrypted files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known encryption utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used. Often the encryption key is stated within command-line invocation of the software. \\n\\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. \\n\\nNetwork traffic may also be analyzed for entropy to determine if encrypted data is being transmitted. (Citation: Zhang 2013) If the communications channel is unencrypted, encrypted files of known file types can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers. (Citation: Wikipedia File Header Signatures)\",\"name\":\"Data Encrypted\"}, {\"x_mitre_detection\":\"While users may customize their <code>~/.bashrc</code> and <code>~/.bash_profile</code> files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.\",\"created_by_ref\":\"identity--c78cb6e5-0c4b-4611-8297-d1xxxxxxxxxx\",\"description\":\"Adversaries may establish persistence by executing malicious content triggered by a userâ€™s shell. <code>~/.bash_profile</code> and <code>~/.bashrc</code> are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.\\n\\n<code>~/.bash_profile</code> is executed for login shells and <code>~/.bashrc</code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <code>~/.bash_profile</code> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <code>~/.bashrc</code> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.\\n\\nThe macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~/.bash_profile</code> each time instead of <code>~/.bashrc</code>.\\n\\nAdversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.(Citation: amnesia malware)\",\"created\":\"2020-01-24T14:13:45.936Z\",\"x_mitre_data_sources\":[\"Process use of network\",\"Process command-line parameters\",\"Process monitoring\",\"File monitoring\"],\"x_mitre_is_subtechnique\":true,\"x_mitre_permissions_required\":[\"User\",\"Administrator\"],\"kill_chain_phases\":[{\"phase_name\":\"privilege-escalation\",\"kill_chain_name\":\"mitre-attack\"},{\"phase_name\":\"persistence\",\"kill_chain_name\":\"mitre-attack\"}],\"modified\":\"2020-03-24T16:28:04.990Z\",\"name\":\".bash_profile and .bashrc\",\"x_mitre_platforms\":[\"Linux\",\"macOS\"],\"object_marking_refs\":[\"marking-definition--fa42a846-8d90-4e51-bc29-71xxxxxxxxxx\"],\"x_mitre_version\":\"1.0\",\"type\":\"attack-pattern\",\"id\":\"attack-pattern--b63a34e8-0a61-4c97-a23b-bfxxxxxxxxxx\",\"external_references\":[{\"url\":\"https://attack.mitre.org/techniques/Txxxx/xxx\",\"external_id\":\"Txxxx.xxx\",\"source_name\":\"mitre-attack\"},{\"url\":\"https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/\",\"source_name\":\"amnesia malware\",\"description\":\"Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.\"}]}]"
    }
  ],
  "Creator": "Admin",
  "IsEnabled": true,
  "IsCustom": false,
  "Version": 1.0,
  "Parameters": [
    {
      "CustomActionId": -1,
      "IsMandatory": true,
      "DefaultValue": "",
      "Description": "Specify the comma-separated list of identifiers that will be used to find the detailed information about techniques. Example: identifier_1,identifier_2",
      "Name": "Technique Identifier",
      "Type": 0,
      "Id": -1,
      "CreationTimeUnixTimeInMs": 1570585605761,
      "ModificationTimeUnixTimeInMs": 1570585605761
    },
    {
      "CustomActionId": -1,
      "IsMandatory": true,
      "DefaultValue": "ID",
      "Description": "Specify what identifier type to use. Possible values: Name (Example: Access Token Manipulation) ID (Example: attack-pattern--478aa214-2ca7-4ec0-9978-18798e514790) External ID (Example: T1050)",
      "Name": "Identifier Type",
      "Type": 15,
      "OptionalValues": [
        "Name",
        "ID",
        "External ID"
      ],
      "OptionalValuesJson": "[\"Name\",\"ID\",\"External ID\"]",
      "Id": -1,
      "CreationTimeUnixTimeInMs": 1570585605761,
      "ModificationTimeUnixTimeInMs": 1570585605761
    },
    {
      "CustomActionId": -1,
      "IsMandatory": false,
      "DefaultValue": false,
      "Description": "If enabled, action will create a separate insight for every processed technique",
      "Name": "Create Insights",
      "Type": 1,
      "Id": -1,
      "CreationTimeUnixTimeInMs": 1570585605761,
      "ModificationTimeUnixTimeInMs": 1570585605761
    }
  ],
  "Id": -1,
  "CreationTimeUnixTimeInMs": 1570582938066,
  "ModificationTimeUnixTimeInMs": 1570582938082,
  "SimulationDataJson": "{\"Entities\": []}"
}