{
    "CreationTimeUnixTimeInMs": 1524571310732, 
    "Creator": "admin", 
    "Description": "ElasticSearch DSL Connector",
    "Id": -1, 
    "Integration": "ElasticSearch", 
    "IsConnectorRulesSupported": true, 
    "IsCustom": false, 
    "IsEnabled": true, 
    "MappingRules": [], 
    "ModificationTimeUnixTimeInMs": 1524571310732, 
    "Name": "ElasticSearch DSL Connector",
    "Parameters": [
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "device_product", 
            "Description": "The field name used to determine the device product. e.g. _type", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": true,
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "DeviceProductField", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "name", 
            "Description": "The field name used to determine the event name (sub-type). e.g. _source_match_event_id", 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "EventClassId", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "60", 
            "Description": "The timeout limit (in seconds) for the python process running current script", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": true,
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "PythonProcessTimeout", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "The ElasticSearch server address, i.e: http://{ip_address}:{port}", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Server Address", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "ElasticSearch username", 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Username", 
            "Type": 2
        }, 
        {
          "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "CA Certificate File", 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "CA Certificate File", 
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "ElasticSearch password", 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Password", 
            "Type": 3
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "FALSE", 
            "Description": "Whether to authenticate on connection or not", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Authenticate", 
            "Type": 0
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "FALSE", 
            "Description": "Whether to use ssl on connection or not", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Verify SSL", 
            "Type": 0
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "The name of the field where the alert name is located. e.g. _source_info_alertname",
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Alert Field Name",
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1,
            "CreationTimeUnixTimeInMs": 1524571310732,
            "DefaultValue": null,
            "Description": "The name of the field where the description is located. e.g. _source_alert_info_description",
            "Id": -1,
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2,
            "ModificationTimeUnixTimeInMs": 1524571310732,
            "Name": "Alert Description Field",
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1,
            "CreationTimeUnixTimeInMs": 1524571310732,
            "DefaultValue": "",
            "Description": "Severity of the alerts. Possible value: Info, Low, Medium, High, Critical. Note: this parameter has priority over “Severity Field Name“. If you want to work with “Severity Field Name“, this field should be left empty.",
            "Id": -1,
            "IsMandatory": false,
            "IsAdvanced": false,
            "Mode": 2,
            "ModificationTimeUnixTimeInMs": 1524571310732,
            "Name": "Alert Severity",
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1,
            "CreationTimeUnixTimeInMs": 1524571310732,
            "DefaultValue": "",
            "Description": "If you want to map severity based on the string value then you would need to create a mapping file. Please refer to documentation portal for more details.",
            "Id": -1,
            "IsMandatory": false,
            "IsAdvanced": false,
            "Mode": 2,
            "ModificationTimeUnixTimeInMs": 1524571310732,
            "Name": "Severity Field Name",
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "The name of the field where the timestamp is located (flat field path). e.g. _source_@timestamp", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Timestamp Field", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "The name of the field where the environment name is stored. If the environment field isn't found, the environment is ''",
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Environment Field Name",
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1,
            "CreationTimeUnixTimeInMs": 1524571310732,
            "DefaultValue": ".*",
            "Description": "A regex pattern to run on the value found in the \"Environment Field Name\" field. Default is .* to catch all and return value unchanged. Used to allow the user to manipulate the environment field via regex logic. If the regex pattern is null or empty, or the environment value is null, the final environment result is ''.",
            "Id": -1,
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2,
            "ModificationTimeUnixTimeInMs": 1524571310732,
            "Name": "Environment Regex Pattern",
            "Type": 2
        },
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "_all",
            "Description": "Index pattern to search by. e.g. '_all'",
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Index",
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": null, 
            "Description": "DSL Query that is used for the search. Note: Valid Json format needed",
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Query", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "20", 
            "Description": "Max count of alerts to pull in one cycle. e.g. 20", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Alerts Count Limit", 
            "Type": 1
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "1", 
            "Description": "Max number of days to fetch alerts since. e.g. 3", 
            "Id": -1, 
            "IsMandatory": true,
            "IsAdvanced": false,
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Max Days Backwards", 
            "Type": 1
        }, 
        {
            "CreationTimeUnixTimeInMs": 1574099687000, 
            "Name": "Proxy Server Address", 
            "ModificationTimeUnixTimeInMs": 1574099687000, 
            "Type": 2, 
            "DefaultValue": null, 
            "Description": "The address of the proxy server to use.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2
        }, 
        {
            "CreationTimeUnixTimeInMs": 1574099687000, 
            "Name": "Proxy Username", 
            "ModificationTimeUnixTimeInMs": 1574099687000, 
            "Type": 2, 
            "DefaultValue": null, 
            "Description": "The proxy username to authenticate with.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2
        }, 
        {
            "CreationTimeUnixTimeInMs": 1525167465721, 
            "Name": "Proxy Password", 
            "ModificationTimeUnixTimeInMs": 1525167465721, 
            "Type": 3, 
            "DefaultValue": null, 
            "Description": "The proxy password to authenticate with.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false,
            "IsAdvanced": true,
            "Mode": 2
        }
    ], 
    "ProductToVisualFamilyRecords": [], 
    "Rules": [], 
    "Script": "# ============================================================================#\n# title           :ArcsightESMConnector.py\n# description     :This Module contain all Arcsight ESM connector functionality\n# author          :avital@siemplify.co\n# date            :26-03-2018\n# python_version  :2.7\n# ============================================================================#\n\n# ============================= IMPORTS ===================================== #\n\nimport sys\nfrom SiemplifyUtils import dict_to_flat, utc_now\nfrom SiemplifyConnectors import CaseInfo, SiemplifyConnectorExecution\nfrom ElasticsearchManager import ElasticsearchManager\n\n# ============================== CONSTS ===================================== #\nDEFAULT_VENDOR = \"ElasticSearch\"\nSCRIPT_NAME = \"ElasticSerach Connector\"\nTIME_FORMAT = \"%Y-%m-%dT%H:%M:%S\"\n\n# ============================= CLASSES ===================================== #\n\n\nclass ElasticSearchConnectorException(Exception):\n    \"\"\"\n    ElasticSearch Exception\n    \"\"\"\n    pass\n\n\nclass ElasticSearchConnector(object):\n    \"\"\"\n    ElasticSearch Connector\n    \"\"\"\n\n    def __init__(self, connector_scope, elastic_manager):\n        self.connector_scope = connector_scope\n        self.logger = connector_scope.LOGGER\n        self.elastic_manager = elastic_manager\n\n    def get_alerts(self, index=None, query=None):\n        \"\"\"\n        Fetch alerts from ElasticSearch\n        :return: {list} List of found alerts\n        \"\"\"\n        last_run = self.connector_scope.fetch_and_save_timestamp(\n            datetime_format=True).strftime(TIME_FORMAT)\n        all_alerts, status, total_hits = self.elastic_manager.advanced_es_search(\n            **{\n                'Index': index,\n                'Query': query,\n                'Oldest Date': last_run\n            }\n        )\n\n        alerts = []\n        for alert in all_alerts:\n            is_overflow = True\n\n            try:\n                is_overflow = self.connector_scope.is_overflowed_alert(\n                    environment=self.connector_scope.context.connector_info.environment,\n                    alert_identifier=alert['_id'],\n                    ingestion_time=alert['alert_time'],\n                    alert_name=alert['_source']['rule_name'])\n\n            except Exception as e:\n                self.logger.error(\n                    \"Failed to detect overflow for alert {}: {}\".format(\n                        alert['_id'],\n                        alert['_source']['rule_name']\n                    )\n                )\n                self.logger.error(\n                    \"Error Message: {}\".format(e.message))\n\n            if not is_overflow:\n                # Generate case info for the alert\n                alerts.append(alert)\n\n            else:\n                self.logger.warn(\"Overflowed on alert {}: {}\".format(\n                        alert['_id'],\n                        alert['_source']['rule_name']\n                    )\n                )\n\n        return alerts\n\n    def create_case_info(self, alert):\n        \"\"\"\n        Create CaseInfo object from ElasticSearch alert\n        :param alert: {dict} An ES alert\n        :return: {CaseInfo} The newly created case\n        \"\"\"\n        self.logger.info(\n            \"Creating Case for Alert {}\".format(alert['_id']))\n\n        try:\n            # Create the CaseInfo\n            case_info = CaseInfo()\n            case_info.name = alert['_source']['rule_name']\n            case_info.ticket_id = alert['_id']\n            case_info.rule_generator = alert['_source']['rule_name']\n            case_info.display_id = alert['_id']\n            case_info.device_vendor = DEFAULT_VENDOR\n            case_info.device_product = alert['source']['match_body']['type']\n            case_info.start_time = alert[\"alert_time\"]\n            case_info.end_time = alert[\"alert_time\"]\n            case_info.priority = alert[\"level\"] # TODO: Translate to Siemplify.\n            case_info.environment = self.connector_scope.context.connector_info.environment\n\n        except KeyError as e:\n            raise KeyError(\"Mandatory key is missing: {}\".format(e.message))\n\n        # Set the alert as the event\n        flat_events = [dict_to_flat(alert['source']['match_body'])]\n        case_info.events = flat_events\n\n        return case_info\n\n\ndef test():\n    \"\"\"\n    Test execution - ElasticSearch Connector\n    \"\"\"\n    connector_scope = SiemplifyConnectorExecution()\n    connector_scope.script_name = SCRIPT_NAME\n    result_params = {}\n    result_value = True\n\n    connector_scope.LOGGER.info(\"Starting Connector Test.\")\n\n    try:\n        connector_scope.LOGGER.info(\"Testing connection to ElasticSearch\")\n        server_address = connector_scope.parameters['Server Address']\n        port = int(connector_scope.parameters['Port'])\n        index = connector_scope.parameters['Index']\n        query = connector_scope.parameters['Query']\n\n        # Connect to Arcsight\n        elastic_manager = ElasticsearchManager(server_address, port)\n\n        connector_scope.LOGGER.info(\"Connection is successful.\")\n\n        elastic_connector = ElasticSearchConnector(connector_scope,\n                                                    elastic_manager)\n\n        # Get alerts\n        connector_scope.LOGGER.info(\"Trying to fetch alerts.\")\n        alerts = elastic_connector.get_alerts(index, query)\n\n        connector_scope.LOGGER.info(\"Successfully found {} alerts.\".format(len(alerts)))\n\n        # Construct CaseInfos from alerts\n        connector_scope.LOGGER.info(\"Testing CaseInfo construction.\")\n\n        cases = []\n        for alert in alerts:\n            try:\n                connector_scope.LOGGER.info(\n                    \"Processing alert {}: \".format(alert['_id'],\n                                                   alert['_source'][\n                                                       'rule_name']))\n\n                case = elastic_connector.create_case_info(alert)\n                cases.append(case)\n\n            except Exception as e:\n                # Failed to build CaseInfo for alert\n                connector_scope.LOGGER.error(\n                    \"Failed to create CaseInfo for alert {}: {}\".format(\n                        alert['_id'],\n                        alert['_source']['rule_name']\n                    )\n                )\n                connector_scope.LOGGER.error(\n                    \"Error Message: {}\".format(e.message))\n\n                result_value = False\n\n        if len(cases) != len(alerts):\n            result_value = False\n            connector_scope.LOGGER.error(\"Failed to create cases for some alerts. Check logs for details.\")\n\n        else:\n            connector_scope.LOGGER.info(\n                \"Successfully constructed CaseInfo for all alerts.\")\n\n        connector_scope.LOGGER.info(\"Test completed.\")\n\n        # Return data\n        connector_scope.return_test_result(result_value, result_params)\n\n    except Exception as e:\n        connector_scope.LOGGER.error(e.message)\n        connector_scope.LOGGER._log.exception(e)\n        connector_scope.return_test_result(False, {})\n\n\ndef main():\n    \"\"\"\n    Main execution - ElasticSearch Connector\n    \"\"\"\n    connector_scope = SiemplifyConnectorExecution()\n    connector_scope.script_name = SCRIPT_NAME\n    output_variables = {}\n    log_items = []\n\n    connector_scope.LOGGER.info(\"Starting Connector.\")\n\n    try:\n        connector_scope.LOGGER.info(\"Connecting to ElasticSearch\")\n        server_address = connector_scope.parameters['Server Address']\n        port = int(connector_scope.parameters['Port'])\n        index = connector_scope.parameters['Index']\n        query = connector_scope.parameters['Query']\n\n        # Connect to Arcsight\n        elastic_manager = ElasticsearchManager(server_address, port)\n\n        elastic_connector = ElasticSearchConnector(connector_scope,\n                                                    elastic_manager)\n\n        # Get alerts from ElasticSearch\n        connector_scope.LOGGER.info(\n            \"Collecting alerts from ElasticSearch.\")\n        alerts = elastic_connector.get_alerts(index, query)\n\n        # Construct CaseInfo from alerts\n        cases = []\n\n        for alert in alerts:\n            try:\n                connector_scope.LOGGER.info(\n                    \"Processing alert {}: \".format(alert['_id'],\n                                                   alert['_source'][\n                                                       'rule_name']))\n\n                case = elastic_connector.create_case_info(alert)\n                cases.append(case)\n\n            except Exception as e:\n                # Failed to build CaseInfo for alert\n                connector_scope.LOGGER.error(\n                    \"Failed to create CaseInfo for alert {}: {}\".format(\n                        alert['_id'],\n                        alert['_source']['rule_name']\n                    )\n                )\n                connector_scope.LOGGER.error(\n                    \"Error Message: {}\".format(e.message))\n\n\n        connector_scope.LOGGER.info(\n            \"Completed. Found {} cases.\".format(len(cases)))\n\n        # Return data\n        connector_scope.return_package(cases, output_variables, log_items)\n\n    except Exception as e:\n        connector_scope.LOGGER.error(e.message)\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2 or sys.argv[1] == 'True':\n        print \"Main execution started\"\n        main()\n    else:\n        print \"Test execution started\"\n        test()", 
    "SimulationUseCases": {
        "CasesForUseCase": [], 
        "UseCaseName": null
    }, 
    "Version": 1,
    "DocumentationLink": "https://integrations.siemplify.co/doc/elasticsearch#connectors"
}