{
    "CreationTimeUnixTimeInMs": 1522665785536,
    "Creator": "Siemplify System",
    "Description": "Searches through everything in Elastic Search and returns back results in a dictionary format. This action supports only queries without time range, if you want to use time range in your query use Advanced ES Search action.",
    "DynamicResultsMetadata": [
        {
            "ResultExample": "[{\"_score\": 0.2876821, \"_type\": \"person\", \"_id\": \"2\", \"_source\": {\"lastname\": \"Smith\", \"name\": \"John\", \"job_description\": \"Systems administrator\"}, \"_index\": \"accounts\"}, {\"_score\": 0.28582606, \"_type\": \"person\", \"_id\": \"1\", \"_source\": {\"lastname\": \"Doe\", \"name\": \"John\", \"job_description\": \"Systems administrator and Linux specialist\"}, \"_index\": \"accounts\"}]",
            "ResultName": "JsonResult"
        }
    ],
    "Id": -1,
    "IntegrationIdentifier": "ElasticSearch",
    "IsCustom": false,
    "IsEnabled": true,
    "ModificationTimeUnixTimeInMs": 1522665785536,
    "Name": "Simple ES Search",
    "Parameters": [
        {
            "CreationTimeUnixTimeInMs": 1560424826000,
            "CustomActionId": -1,
            "DefaultValue": "*",
            "Description": "Search pattern for a elastic index.\r\nIn elastic, index is like a DatabaseName, and data is stored across various indexes.\r\nThis param defines in what index(es) to search. It can be an exact name ie: \"smp_playbooks-2019.06.13\"\r\nor you can use a (*) wildcard to search by a pattern. e: \"smp_playbooks-2019.06*\" or \"smp*\".\r\nTo learn more about elastic indexes visit https://www.elastic.co/blog/what-is-an-elasticsearch-index",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1560424826000,
            "Name": "Index",
            "Type": 0,
            "Value": "*"
        },
        {
            "CreationTimeUnixTimeInMs": 1560424826000,
            "CustomActionId": -1,
            "DefaultValue": "*",
            "Description": "The search query to perform. It is in Lucene syntax.\r\nIE1: \"*\" (this is a wildcard that will return all record)\r\nIE1: \"level:error\"\r\nIE2: \"level:information\"\r\nIE3: \"level:error OR level:warning\"\r\nTo learn more about lucene syntax, visit\r\nhttps://www.elastic.co/guide/en/kibana/current/lucene-query.html#lucene-query\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-query-string-query.html#query-string-syntax",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1560424826000,
            "Name": "Query",
            "Type": 0,
            "Value": "*"
        },
        {
            "CreationTimeUnixTimeInMs": 1560424826000,
            "CustomActionId": -1,
            "DefaultValue": "100",
            "Description": "Limits the document return count, ie: 10.\r\n0 = No limit",
            "Id": -1,
            "IsMandatory": false,
            "ModificationTimeUnixTimeInMs": 1560424826000,
            "Name": "Limit",
            "Type": 0,
            "Value": "100"
        }
    ],
    "Script": "from ElasticsearchManager import ElasticsearchManager\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import dict_to_flat, flat_dict_to_csv\n\ndef main():\n    siemplify = SiemplifyAction()\n    conf = siemplify.get_configuration('ElasticSearch')\n    elasticsearch_wrapper = ElasticsearchManager(conf[\"Server Address\"], int(conf[\"Port\"]))\n\n    index = siemplify.parameters.get(\"Index\")\n    query = siemplify.parameters.get('Query')\n    limit = siemplify.parameters.get('Limit')\n\n    results, status, total_hits = elasticsearch_wrapper.simple_es_search(index, query, limit)\n    if status:\n        output_message = \"Query ran successfully {0} hits found\".format(total_hits)\n        result_value = 'true'\n    else:\n        output_message = \"ERROR: Query failed to run\"\n        result_value = 'false'\n\n    for count, result in enumerate(results):\n        flat_result = dict_to_flat(result)\n        csv_output = flat_dict_to_csv(flat_result)\n        siemplify.result.add_data_table(\"Results {}\".format(count), csv_output)\n\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == \"__main__\":\n    main()",
    "ScriptResultName": "results",
    "Version": 0.0,
    "SimulationDataJson": "{\"Entities\": []}"
}