{
    "CreationTimeUnixTimeInMs": 1525274319261, 
    "Creator": "admin", 
    "Description": "Fetching events from SymantecICDX server using a query", 
    "Id": -1, 
    "Integration": "SymantecICDX", 
    "IsConnectorRulesSupported": false, 
    "IsCustom": false, 
    "IsEnabled": true, 
    "MappingRules": [], 
    "ModificationTimeUnixTimeInMs": 1525274319261, 
    "Name": "SymantecICDX query Connector", 
    "Parameters": [
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": "device_product", 
            "Description": "The field name used to determine the device product", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "DeviceProductField", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": "name", 
            "Description": "The field name used to determine the event name (sub-type)", 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "EventClassId", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": "60", 
            "Description": "The timeout limit (in seconds) for the python process running current script", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 0, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "PythonProcessTimeout", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": null, 
            "Description": "", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "Api Root", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": null, 
            "Description": "", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "Api Token", 
            "Type": 3
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": "FALSE", 
            "Description": "Whether to use ssl on connection or not", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "Verify SSL", 
            "Type": 0
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1525274319261, 
            "DefaultValue": null, 
            "Description": "", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1525274319261, 
            "Name": "Search Query", 
            "Type": 2
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "10", 
            "Description": "Max count of events to pull in one cycle. e.g. 20", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Events Limit", 
            "Type": 1
        }, 
        {
            "ConnectorDefinitionId": -1, 
            "CreationTimeUnixTimeInMs": 1524571310732, 
            "DefaultValue": "1", 
            "Description": "Max number of days to fetch events since. e.g. 3", 
            "Id": -1, 
            "IsMandatory": true, 
            "Mode": 2, 
            "ModificationTimeUnixTimeInMs": 1524571310732, 
            "Name": "Max Days Backwards", 
            "Type": 1
        }, 
        {
            "CreationTimeUnixTimeInMs": 1574099687000, 
            "Name": "Proxy Server Address", 
            "ModificationTimeUnixTimeInMs": 1574099687000, 
            "Type": 2, 
            "DefaultValue": null, 
            "Description": "The address of the proxy server to use.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2
        }, 
        {
            "CreationTimeUnixTimeInMs": 1574099687000, 
            "Name": "Proxy Username", 
            "ModificationTimeUnixTimeInMs": 1574099687000, 
            "Type": 2, 
            "DefaultValue": null, 
            "Description": "The proxy username to authenticate with.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2
        }, 
        {
            "CreationTimeUnixTimeInMs": 1525167465721, 
            "Name": "Proxy Password", 
            "ModificationTimeUnixTimeInMs": 1525167465721, 
            "Type": 3, 
            "DefaultValue": null, 
            "Description": "The proxy password to authenticate with.", 
            "ConnectorDefinitionId": -1, 
            "Id": -1, 
            "IsMandatory": false, 
            "Mode": 2
        }
    ], 
    "ProductToVisualFamilyRecords": [], 
    "Rules": [], 
    "Script": "from SiemplifyConnectors import CaseInfo, SiemplifyConnectorExecution\nfrom TenableManager import TenableSecurityCenterManager\nfrom SiemplifyUtils import dict_to_flat, add_prefix_to_dict_keys\nimport uuid\nimport re\nimport sys\n\n# ============================== CONSTS ===================================== #\nIGNORED_LIST_OF_SEVERITIES = ['Low', 'Info']\nDEVICE_VENDOR = 'Tenable'\nDEVICE_PRODUCT = 'Security Center'\nRULE_GENERATOR = 'Vulnerabilities'\nCVE_REGEX = \"(?<=CVE:)[^,]*\"\n\n\n# ============================== CLASSES ==================================== #\nclass TenableConnector(object):\n    def __init__(self, connector_scope, tenable_manager):\n        self.connector_scope = connector_scope\n        self.logger = connector_scope.LOGGER\n        self.tenable_manager = tenable_manager\n\n    def get_alerts(self):\n        \"\"\"\n        Get alerts from tenable and generate CaseInfos\n        :return: {list} The new cases (CaseInfo)\n        \"\"\"\n        self.logger.info(\"Collecting alerts\")\n        vulnerabilities = self.tenable_manager.get_vulnerabilities(days_ago=1)\n\n        self.logger.info(\"Found {} vulnerabilities.\".format(len(vulnerabilities)))\n\n        cases = []\n\n        for vulnerability in vulnerabilities:\n            try:\n                self.logger.info(\"Processing vulnerability: {}\".format(vulnerability['name']))\n                if vulnerability['severity'] in IGNORED_LIST_OF_SEVERITIES:\n                    # Vulnerability not relevant - skip vulnerability\n                    self.logger.info(\"Vulnerability's severity is ignored ({}). Skipping vulnerability.\".format(vulnerability['severity']))\n                    continue\n\n                plugin_info = self.tenable_manager.get_plugin_info(vulnerability['pluginID'])\n                plugin_info = add_prefix_to_dict_keys(plugin_info, 'plugin')\n                vulnerability.update(plugin_info)\n\n                case_info = self.build_case_info(vulnerability)\n                cases.append(case_info)\n\n            except Exception as e:\n                # The correlation has failed\n                self.logger.error(\n                    \"Failed to process  vulnerability{}\".format(\n                        vulnerability['name'])\n                )\n\n                self.logger._log.exception(e)\n\n        return cases\n\n    def build_case_info(self, vulnerability):\n        \"\"\"\n        Build a CaseInfo from a vulnerability\n        :param vulnerability: {dict} The vulnerability\n        :return: {CaseInfo} The new CaseInfo\n        \"\"\"\n        self.logger.info(\"Building CaseInfo for {}\".format(vulnerability['name']))\n        try:\n            case_info = CaseInfo()\n            case_info.name = vulnerability['name']\n            case_info.identifier = str(uuid.uuid4())\n            case_info.ticket_id = case_info.identifier\n            case_info.device_vendor = DEVICE_VENDOR\n            case_info.device_product = DEVICE_PRODUCT\n            case_info.display_id = case_info.identifier\n            case_info.rule_generator = RULE_GENERATOR\n            case_info.environment = self.connector_scope.context.connector_info.environment\n\n            pattern = re.compile(CVE_REGEX)\n            cves = pattern.findall(vulnerability['plugin_xrefs'])\n\n            for index, cve in enumerate(cves):\n                vulnerability['CVE_{}'.format(index)] = cve\n\n            # Inject device vendor & product to event\n            vulnerability['device_vendor'] = DEVICE_VENDOR\n            vulnerability['device_product'] = DEVICE_PRODUCT\n\n            case_info.events = [dict_to_flat(vulnerability)]\n\n            return case_info\n\n        except KeyError as e:\n            raise KeyError(\"Missing mandatory key: {}\".format(str(e)))\n\n\ndef main():\n    connector_scope = SiemplifyConnectorExecution()\n    output_variables = {}\n    log_items = []\n\n    connector_scope.script_name = 'Tenable Connector'\n    connector_scope.LOGGER.info(\"Starting Connector\")\n\n    try:\n        connector_scope.LOGGER.info(\"Connecting to Tenable\")\n        server_address = connector_scope.parameters['Server Address']\n        username = connector_scope.parameters['Username']\n        password = connector_scope.parameters['Password']\n        use_ssl = connector_scope.parameters['Use SSL'].lower() =='true'\n\n        tenable_manager = TenableSecurityCenterManager(server_address,\n                                                       username, password,\n                                                       use_ssl)\n\n        tenable_connector = TenableConnector(connector_scope, tenable_manager)\n        cases = tenable_connector.get_alerts()\n        connector_scope.LOGGER.info(\"Completed. Found {} cases.\".format(len(cases)))\n\n        connector_scope.return_package(cases, output_variables, log_items)\n\n    except Exception as e:\n        connector_scope.LOGGER.error(e.message)\n        connector_scope.LOGGER._log.exception(e)\n\n\ndef test():\n    connector_scope = SiemplifyConnectorExecution()\n    connector_scope.script_name = 'Tenable Connector'\n    connector_scope.LOGGER.info(\"Starting Connector\")\n\n    connector_scope.LOGGER.info(\"Connecting to Tenable.\")\n    server_address = connector_scope.parameters['Server Address']\n    username = connector_scope.parameters['Username']\n    password = connector_scope.parameters['Password']\n    use_ssl = connector_scope.parameters['Use SSL'].lower() =='true'\n\n    tenable_manager = TenableSecurityCenterManager(server_address,\n                                                   username, password,\n                                                   use_ssl)\n\n    tenable_connector = TenableConnector(connector_scope,\n                                         tenable_manager)\n\n    connector_scope.LOGGER.info(\"Connected successfully.\")\n    connector_scope.LOGGER.info(\"Trying te fetch alerts.\")\n\n    cases = tenable_connector.get_alerts()\n\n    connector_scope.LOGGER.info(\n        \"Success. Found {} cases.\".format(len(cases)))\n\n    connector_scope.return_test_result(True, {})\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2 or sys.argv[1] == 'True':\n        print \"Main execution started\"\n        main()\n    else:\n        print \"Test execution started\"\n        test()", 
    "SimulationUseCases": {
        "CasesForUseCase": [], 
        "UseCaseName": null
    }, 
    "Version": 1
}